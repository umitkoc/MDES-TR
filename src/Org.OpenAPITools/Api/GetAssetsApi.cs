/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. All request and response parameters are case sensitive. 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetAssetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetResponseData</returns>
        AssetResponseData GetAsset(string assetId, string maj, int operationIndex = 0);

        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetResponseData</returns>
        ApiResponse<AssetResponseData> GetAssetWithHttpInfo(string assetId, string maj, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetAssetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponseData</returns>
        System.Threading.Tasks.Task<AssetResponseData> GetAssetAsync(string assetId, string maj, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos
        /// </summary>
        /// <remarks>
        /// This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponseData)</returns>
        System.Threading.Tasks.Task<ApiResponse<AssetResponseData>> GetAssetWithHttpInfoAsync(string assetId, string maj, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGetAssetsApi : IGetAssetsApiSync, IGetAssetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GetAssetsApi : IGetAssetsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetAssetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GetAssetsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GetAssetsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GetAssetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public GetAssetsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AssetResponseData</returns>
        public AssetResponseData GetAsset(string assetId, string maj, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<AssetResponseData> localVarResponse = GetAssetWithHttpInfo(assetId, maj);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AssetResponseData</returns>
        public Org.OpenAPITools.Client.ApiResponse<AssetResponseData> GetAssetWithHttpInfo(string assetId, string maj, int operationIndex = 0)
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetId' when calling GetAssetsApi->GetAsset");
            }

            // verify the required parameter 'maj' is set
            if (maj == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'maj' when calling GetAssetsApi->GetAsset");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AssetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("maj", Org.OpenAPITools.Client.ClientUtils.ParameterToString(maj)); // path parameter

            localVarRequestOptions.Operation = "GetAssetsApi.GetAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<AssetResponseData>("/issuer-assets/{maj}/asset/tokenrequestor/{AssetId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AssetResponseData</returns>
        public async System.Threading.Tasks.Task<AssetResponseData> GetAssetAsync(string assetId, string maj, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<AssetResponseData> localVarResponse = await GetAssetWithHttpInfoAsync(assetId, maj, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve static Assets from MDES&#39;s repository, such as Token Requestors&#39; logos This API is used to retrieve static Assets from MDES repository, such as the Token Requestor logo. Every Asset in the repository is referenced using an Asset ID. Once an Asset has been assigned to an Asset ID, the contents of the Asset will not change. If contents needs to change (for example, Token Requestor has supplied new artwork), they will be updated in the repository and be assigned a new Asset ID. Different types of Assets are supported in the repository, such as images and text files; for each type of Asset, multiple formats may be supported. For example, a single image asset may be supported in various file formats, or variant sizes. This allows the Issuer to select the most appropriate format to use for a particular target. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="assetId">An Asset ID corresponds to an individual Digital Asset. Digital Assets are returned as part of the Product Configuration from the Tokenize Response. The Asset ID itself is supplied as a Get request in the form of https://{INSERT ENVIRONMENT URL HERE}/mdes/assets/static/1/0/asset/{AssetId} - See JSON examples for details. </param>
        /// <param name="maj">Major parameter to be added to each path </param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AssetResponseData)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<AssetResponseData>> GetAssetWithHttpInfoAsync(string assetId, string maj, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'assetId' is set
            if (assetId == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'assetId' when calling GetAssetsApi->GetAsset");
            }

            // verify the required parameter 'maj' is set
            if (maj == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'maj' when calling GetAssetsApi->GetAsset");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("AssetId", Org.OpenAPITools.Client.ClientUtils.ParameterToString(assetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("maj", Org.OpenAPITools.Client.ClientUtils.ParameterToString(maj)); // path parameter

            localVarRequestOptions.Operation = "GetAssetsApi.GetAsset";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<AssetResponseData>("/issuer-assets/{maj}/asset/tokenrequestor/{AssetId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetAsset", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
