/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizeServiceApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.
        /// </summary>
        /// <remarks>
        /// AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizeServiceResponseSchema</returns>
        AuthorizeServiceResponseSchema AuthorizeService(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0);

        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.
        /// </summary>
        /// <remarks>
        /// AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizeServiceResponseSchema</returns>
        ApiResponse<AuthorizeServiceResponseSchema> AuthorizeServiceWithHttpInfo(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizeServiceApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.
        /// </summary>
        /// <remarks>
        /// AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizeServiceResponseSchema</returns>
        System.Threading.Tasks.Task<AuthorizeServiceResponseSchema> AuthorizeServiceAsync(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.
        /// </summary>
        /// <remarks>
        /// AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizeServiceResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<AuthorizeServiceResponseSchema>> AuthorizeServiceWithHttpInfoAsync(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IAuthorizeServiceApi : IAuthorizeServiceApiSync, IAuthorizeServiceApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class AuthorizeServiceApi : IAuthorizeServiceApi
    {
        private ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizeServiceApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeServiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public AuthorizeServiceApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
               Org.OpenAPITools.Client.GlobalConfiguration.Instance,
               new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
           );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeServiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public AuthorizeServiceApi(Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizeServiceApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public AuthorizeServiceApi(Client.ISynchronousClient client, Client.IAsynchronousClient asyncClient, Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services. AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>AuthorizeServiceResponseSchema</returns>
        public AuthorizeServiceResponseSchema AuthorizeService(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0)
        {
            Client.ApiResponse<AuthorizeServiceResponseSchema> localVarResponse = AuthorizeServiceWithHttpInfo(authorizeServiceRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services. AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of AuthorizeServiceResponseSchema</returns>
        public Client.ApiResponse<AuthorizeServiceResponseSchema> AuthorizeServiceWithHttpInfo(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0)
        {
            // verify the required parameter 'authorizeServiceRequestSchema' is set
            if (authorizeServiceRequestSchema == null)
            {
                throw new Client.ApiException(400, "Missing required parameter 'authorizeServiceRequestSchema' when calling AuthorizeServiceApi->AuthorizeService");
            }

            Client.RequestOptions localVarRequestOptions = new Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeServiceRequestSchema;

            localVarRequestOptions.Operation = "AuthorizeServiceApi.AuthorizeService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<AuthorizeServiceResponseSchema>("/authorizeService", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services. AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of AuthorizeServiceResponseSchema</returns>
        public async System.Threading.Tasks.Task<AuthorizeServiceResponseSchema> AuthorizeServiceAsync(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Client.ApiResponse<AuthorizeServiceResponseSchema> localVarResponse = await AuthorizeServiceWithHttpInfoAsync(authorizeServiceRequestSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests an Issuer to authorize a Funding Account for a Mastercard service or set of services. AuthorizeService requests an Issuer to authorize a Funding Account for a Mastercard service or set of services.  Information about the service request will be provided to assist with authorization of the account. If additional authentication is required the Issuer may return a list of Activation Methods.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code.  If there are no methods to return the field may be omitted.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="authorizeServiceRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (AuthorizeServiceResponseSchema)</returns>
        public async System.Threading.Tasks.Task<Client.ApiResponse<AuthorizeServiceResponseSchema>> AuthorizeServiceWithHttpInfoAsync(AuthorizeServiceRequestSchema authorizeServiceRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'authorizeServiceRequestSchema' is set
            if (authorizeServiceRequestSchema == null)
            {
                throw new Client.ApiException(400, "Missing required parameter 'authorizeServiceRequestSchema' when calling AuthorizeServiceApi->AuthorizeService");
            }


            Client.RequestOptions localVarRequestOptions = new Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType =   ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = authorizeServiceRequestSchema;

            localVarRequestOptions.Operation = "AuthorizeServiceApi.AuthorizeService";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<AuthorizeServiceResponseSchema>("/authorizeService", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("AuthorizeService", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
