/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holder’s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;


namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestActivationMethodsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Requests Activation Methods from the Account holder.
        /// </summary>
        /// <remarks>
        /// RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestActivationMethodsResponseSchema</returns>
        RequestActivationMethodsResponseSchema RequestForActivationMethods(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0);

        /// <summary>
        /// Requests Activation Methods from the Account holder.
        /// </summary>
        /// <remarks>
        /// RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestActivationMethodsResponseSchema</returns>
        ApiResponse<RequestActivationMethodsResponseSchema> RequestForActivationMethodsWithHttpInfo(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestActivationMethodsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Requests Activation Methods from the Account holder.
        /// </summary>
        /// <remarks>
        /// RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestActivationMethodsResponseSchema</returns>
        System.Threading.Tasks.Task<RequestActivationMethodsResponseSchema> RequestForActivationMethodsAsync(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Requests Activation Methods from the Account holder.
        /// </summary>
        /// <remarks>
        /// RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestActivationMethodsResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<RequestActivationMethodsResponseSchema>> RequestForActivationMethodsWithHttpInfoAsync(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IRequestActivationMethodsApi : IRequestActivationMethodsApiSync, IRequestActivationMethodsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class RequestActivationMethodsApi : IRequestActivationMethodsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestActivationMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestActivationMethodsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestActivationMethodsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public RequestActivationMethodsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestActivationMethodsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public RequestActivationMethodsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="RequestActivationMethodsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public RequestActivationMethodsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Requests Activation Methods from the Account holder. RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>RequestActivationMethodsResponseSchema</returns>
        public RequestActivationMethodsResponseSchema RequestForActivationMethods(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<RequestActivationMethodsResponseSchema> localVarResponse = RequestForActivationMethodsWithHttpInfo(requestActivationMethodsRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests Activation Methods from the Account holder. RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of RequestActivationMethodsResponseSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<RequestActivationMethodsResponseSchema> RequestForActivationMethodsWithHttpInfo(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0)
        {
            // verify the required parameter 'requestActivationMethodsRequestSchema' is set
            if (requestActivationMethodsRequestSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestActivationMethodsRequestSchema' when calling RequestActivationMethodsApi->RequestForActivationMethods");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestActivationMethodsRequestSchema;

            localVarRequestOptions.Operation = "RequestActivationMethodsApi.RequestForActivationMethods";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<RequestActivationMethodsResponseSchema>("/requestActivationMethods", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestForActivationMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Requests Activation Methods from the Account holder. RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of RequestActivationMethodsResponseSchema</returns>
        public async System.Threading.Tasks.Task<RequestActivationMethodsResponseSchema> RequestForActivationMethodsAsync(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<RequestActivationMethodsResponseSchema> localVarResponse = await RequestForActivationMethodsWithHttpInfoAsync(requestActivationMethodsRequestSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Requests Activation Methods from the Account holder. RequestActivationMethods advises an Issuer that a service activation has been requested and that an Issuer should provide Activation Methods for the Account holder.  The Activation Methods will be presented to the Account holder so they may select their preferred delivery channel to receive an Activation Code only when the card eligibility decision is “Require Authentication.”  If there are no methods to return then an empty ActivationMethods array is returned.  If verification of the card data provided in the request fails then an empty ActivationMethods array should be returned. This includes an unknown PAN or if the expiration date or the CVC2 do not match.  This call is made as part of the service activation flow and may be subject to strict time constraints based on the service. If applicable to the service, when no methods are returned or in case of service failure the MDES system will use the methods returned by the pre-digitization network messages or the default methods for the account range. The methods returned from this API will be combined with the activation methods returned from the pre-digitization network messages and any methods configured as forced.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="requestActivationMethodsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (RequestActivationMethodsResponseSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<RequestActivationMethodsResponseSchema>> RequestForActivationMethodsWithHttpInfoAsync(RequestActivationMethodsRequestSchema requestActivationMethodsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'requestActivationMethodsRequestSchema' is set
            if (requestActivationMethodsRequestSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'requestActivationMethodsRequestSchema' when calling RequestActivationMethodsApi->RequestForActivationMethods");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = requestActivationMethodsRequestSchema;

            localVarRequestOptions.Operation = "RequestActivationMethodsApi.RequestForActivationMethods";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<RequestActivationMethodsResponseSchema>("/requestActivationMethods", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("RequestForActivationMethods", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
