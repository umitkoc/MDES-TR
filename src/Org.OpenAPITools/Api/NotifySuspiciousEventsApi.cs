/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;


namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotifySuspiciousEventsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Notifies issuers of any suspicious activties
        /// </summary>
        /// <remarks>
        /// This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotifySuspiciousEventsResponseSchema</returns>
        NotifySuspiciousEventsResponseSchema NotifySuspiciousEvents(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0);

        /// <summary>
        /// Notifies issuers of any suspicious activties
        /// </summary>
        /// <remarks>
        /// This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotifySuspiciousEventsResponseSchema</returns>
        ApiResponse<NotifySuspiciousEventsResponseSchema> NotifySuspiciousEventsWithHttpInfo(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotifySuspiciousEventsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Notifies issuers of any suspicious activties
        /// </summary>
        /// <remarks>
        /// This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotifySuspiciousEventsResponseSchema</returns>
        System.Threading.Tasks.Task<NotifySuspiciousEventsResponseSchema> NotifySuspiciousEventsAsync(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Notifies issuers of any suspicious activties
        /// </summary>
        /// <remarks>
        /// This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotifySuspiciousEventsResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<NotifySuspiciousEventsResponseSchema>> NotifySuspiciousEventsWithHttpInfoAsync(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface INotifySuspiciousEventsApi : INotifySuspiciousEventsApiSync, INotifySuspiciousEventsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class NotifySuspiciousEventsApi : INotifySuspiciousEventsApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="NotifySuspiciousEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotifySuspiciousEventsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotifySuspiciousEventsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public NotifySuspiciousEventsApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotifySuspiciousEventsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public NotifySuspiciousEventsApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="NotifySuspiciousEventsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public NotifySuspiciousEventsApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Notifies issuers of any suspicious activties This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>NotifySuspiciousEventsResponseSchema</returns>
        public NotifySuspiciousEventsResponseSchema NotifySuspiciousEvents(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<NotifySuspiciousEventsResponseSchema> localVarResponse = NotifySuspiciousEventsWithHttpInfo(notifySuspiciousEventsRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notifies issuers of any suspicious activties This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of NotifySuspiciousEventsResponseSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<NotifySuspiciousEventsResponseSchema> NotifySuspiciousEventsWithHttpInfo(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0)
        {
            // verify the required parameter 'notifySuspiciousEventsRequestSchema' is set
            if (notifySuspiciousEventsRequestSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'notifySuspiciousEventsRequestSchema' when calling NotifySuspiciousEventsApi->NotifySuspiciousEvents");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notifySuspiciousEventsRequestSchema;

            localVarRequestOptions.Operation = "NotifySuspiciousEventsApi.NotifySuspiciousEvents";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<NotifySuspiciousEventsResponseSchema>("/notifySuspiciousEvents", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifySuspiciousEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Notifies issuers of any suspicious activties This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of NotifySuspiciousEventsResponseSchema</returns>
        public async System.Threading.Tasks.Task<NotifySuspiciousEventsResponseSchema> NotifySuspiciousEventsAsync(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<NotifySuspiciousEventsResponseSchema> localVarResponse = await NotifySuspiciousEventsWithHttpInfoAsync(notifySuspiciousEventsRequestSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Notifies issuers of any suspicious activties This API aims to assist issuers with their risk management activities and detection of suspicious activity related to the use of digital wallets using MCBP technology. This API will notify issuers about suspicious activity that can be detected by MDES during MCBP replenishment process for a device-based Cloud token used in a digital wallet.  &lt;BR&gt; Security is an important element of our digital strategy and MDES wants to assist Issuers making the right decision as part of their risk management allowing them to take any pro-active action through MDES Customer Service APIs/Portal, such as suspending a token. &lt;ul&gt; &lt;li&gt; This can be done without any delay while your Wallet Provider is investigating the case as Wallet Providers will also get the same notification message to help them investigating when these events occur.&lt;/li&gt;&lt;li&gt; We talk about suspicious activity as this can be an implementation issue on the wallet (or wallet server) and not necessarily a fraud case. &lt;/li&gt;&lt;/ul&gt; &lt;BR&gt; Notification of suspicious activity is informative, and several actions are possible based on the strategy used by Issuers for their risk management:  &lt;ul&gt;&lt;li&gt;Issuers can wait for Wallet Providers to provide further details following analysis of the information. &lt;/li&gt; &lt;li&gt; Issuers can suspend tokens anytime using MDES Customer Service APIs/Portal &lt;/li&gt; &lt;/ul&gt; 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="notifySuspiciousEventsRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (NotifySuspiciousEventsResponseSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<NotifySuspiciousEventsResponseSchema>> NotifySuspiciousEventsWithHttpInfoAsync(NotifySuspiciousEventsRequestSchema notifySuspiciousEventsRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'notifySuspiciousEventsRequestSchema' is set
            if (notifySuspiciousEventsRequestSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'notifySuspiciousEventsRequestSchema' when calling NotifySuspiciousEventsApi->NotifySuspiciousEvents");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = notifySuspiciousEventsRequestSchema;

            localVarRequestOptions.Operation = "NotifySuspiciousEventsApi.NotifySuspiciousEvents";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<NotifySuspiciousEventsResponseSchema>("/notifySuspiciousEvents", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("NotifySuspiciousEvents", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
