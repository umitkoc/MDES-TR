/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holder’s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;


namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidateActivationCodeApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response.
        /// </summary>
        /// <remarks>
        /// This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateActivationCodeResponseSchema</returns>
        ValidateActivationCodeResponseSchema ValidateActivationCode(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0);

        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response.
        /// </summary>
        /// <remarks>
        /// This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateActivationCodeResponseSchema</returns>
        ApiResponse<ValidateActivationCodeResponseSchema> ValidateActivationCodeWithHttpInfo(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidateActivationCodeApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response.
        /// </summary>
        /// <remarks>
        /// This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateActivationCodeResponseSchema</returns>
        System.Threading.Tasks.Task<ValidateActivationCodeResponseSchema> ValidateActivationCodeAsync(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response.
        /// </summary>
        /// <remarks>
        /// This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateActivationCodeResponseSchema)</returns>
        System.Threading.Tasks.Task<ApiResponse<ValidateActivationCodeResponseSchema>> ValidateActivationCodeWithHttpInfoAsync(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IValidateActivationCodeApi : IValidateActivationCodeApiSync, IValidateActivationCodeApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ValidateActivationCodeApi : IValidateActivationCodeApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValidateActivationCodeApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ValidateActivationCodeApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ValidateActivationCodeApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ValidateActivationCodeApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ValidateActivationCodeResponseSchema</returns>
        public ValidateActivationCodeResponseSchema ValidateActivationCode(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<ValidateActivationCodeResponseSchema> localVarResponse = ValidateActivationCodeWithHttpInfo(validateActivationCodeRequestSchema);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ValidateActivationCodeResponseSchema</returns>
        public Org.OpenAPITools.Client.ApiResponse<ValidateActivationCodeResponseSchema> ValidateActivationCodeWithHttpInfo(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0)
        {
            // verify the required parameter 'validateActivationCodeRequestSchema' is set
            if (validateActivationCodeRequestSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'validateActivationCodeRequestSchema' when calling ValidateActivationCodeApi->ValidateActivationCode");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validateActivationCodeRequestSchema;

            localVarRequestOptions.Operation = "ValidateActivationCodeApi.ValidateActivationCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Post<ValidateActivationCodeResponseSchema>("/validateActivationCode", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateActivationCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ValidateActivationCodeResponseSchema</returns>
        public async System.Threading.Tasks.Task<ValidateActivationCodeResponseSchema> ValidateActivationCodeAsync(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<ValidateActivationCodeResponseSchema> localVarResponse = await ValidateActivationCodeWithHttpInfoAsync(validateActivationCodeRequestSchema, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. This API is used to activate a Token for first-time use if the digitization decision was to ‘Require Additional Authentication’ in the Digitize response. A Token may be activated via this API when activation is requested with activationCode and Issuer have chosen the option to validate the code self. If activation code validation is successful, MDES will complete the provisioning process and will notify the Token Requestor when the Token is ready to transact, using the Notify Token Updated API. Note that the user is only given a limited number of attempts to enter a correct Activation Code (typically 3 attempts), after which the Activation Code becomes invalid. In this event, it may be possible to request a new Activation Code directly from the Issuer via customer service or otherwise. This is dependent on individual Issuer implementation and out of scope of this API.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="validateActivationCodeRequestSchema">Contains the details of the request message.</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ValidateActivationCodeResponseSchema)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<ValidateActivationCodeResponseSchema>> ValidateActivationCodeWithHttpInfoAsync(ValidateActivationCodeRequestSchema validateActivationCodeRequestSchema, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            // verify the required parameter 'validateActivationCodeRequestSchema' is set
            if (validateActivationCodeRequestSchema == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'validateActivationCodeRequestSchema' when calling ValidateActivationCodeApi->ValidateActivationCode");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = validateActivationCodeRequestSchema;

            localVarRequestOptions.Operation = "ValidateActivationCodeApi.ValidateActivationCode";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<ValidateActivationCodeResponseSchema>("/validateActivationCode", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("ValidateActivationCode", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
