/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NotifySuspiciousEventsRequestSchema
    /// </summary>
    [DataContract(Name = "NotifySuspiciousEventsRequestSchema")]
    public partial class NotifySuspiciousEventsRequestSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NotifySuspiciousEventsRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NotifySuspiciousEventsRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NotifySuspiciousEventsRequestSchema" /> class.
        /// </summary>
        /// <param name="requestId">The id of the request submitted. Max length - 64 (required).</param>
        /// <param name="tokenUniqueReference">A Unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. (required).</param>
        /// <param name="paymentAppInstanceId">The identifier of the Payment App instance within a device that will be provisioned with a token. Only present when supplied by a Wallet Provider..</param>
        /// <param name="status">The current status of token. Must be one of; INACTIVE - Token has not yet been activated, ACTIVE - Token is active and ready to transact, SUSPENDED - Token is suspended and unable to transact, DEACTIVATED - Token has been permanently deactivated. Max length - 32. Type - String. Conditional - required for notifyTokenUpdated if reasonCode &#x3D; \&quot;STATUS_UPDATE\&quot;. Not present otherwise. (required).</param>
        /// <param name="events">events (required).</param>
        public NotifySuspiciousEventsRequestSchema(string requestId = default(string), string tokenUniqueReference = default(string), string paymentAppInstanceId = default(string), string status = default(string), SuspiciousEvent events = default(SuspiciousEvent))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for NotifySuspiciousEventsRequestSchema and cannot be null");
            }
            this.requestId = requestId;
            // to ensure "tokenUniqueReference" is required (not null)
            if (tokenUniqueReference == null)
            {
                throw new ArgumentNullException("tokenUniqueReference is a required property for NotifySuspiciousEventsRequestSchema and cannot be null");
            }
            this.tokenUniqueReference = tokenUniqueReference;
            // to ensure "status" is required (not null)
            if (status == null)
            {
                throw new ArgumentNullException("status is a required property for NotifySuspiciousEventsRequestSchema and cannot be null");
            }
            this.status = status;
            // to ensure "events" is required (not null)
            if (events == null)
            {
                throw new ArgumentNullException("events is a required property for NotifySuspiciousEventsRequestSchema and cannot be null");
            }
            this.events = events;
            this.paymentAppInstanceId = paymentAppInstanceId;
        }

        /// <summary>
        /// The id of the request submitted. Max length - 64
        /// </summary>
        /// <value>The id of the request submitted. Max length - 64</value>
        /// <example>123456</example>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string requestId { get; set; }

        /// <summary>
        /// A Unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
        /// </summary>
        /// <value>A Unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.</value>
        /// <example>DWSPMC000000000fcb2f4136b2f4136a0532d2f4136a0532</example>
        [DataMember(Name = "tokenUniqueReference", IsRequired = true, EmitDefaultValue = true)]
        public string tokenUniqueReference { get; set; }

        /// <summary>
        /// The identifier of the Payment App instance within a device that will be provisioned with a token. Only present when supplied by a Wallet Provider.
        /// </summary>
        /// <value>The identifier of the Payment App instance within a device that will be provisioned with a token. Only present when supplied by a Wallet Provider.</value>
        /// <example>1b24f24a24ba98e27d43e345b532a245e4723d7a9c4f624e</example>
        [DataMember(Name = "paymentAppInstanceId", EmitDefaultValue = false)]
        public string paymentAppInstanceId { get; set; }

        /// <summary>
        /// The current status of token. Must be one of; INACTIVE - Token has not yet been activated, ACTIVE - Token is active and ready to transact, SUSPENDED - Token is suspended and unable to transact, DEACTIVATED - Token has been permanently deactivated. Max length - 32. Type - String. Conditional - required for notifyTokenUpdated if reasonCode &#x3D; \&quot;STATUS_UPDATE\&quot;. Not present otherwise.
        /// </summary>
        /// <value>The current status of token. Must be one of; INACTIVE - Token has not yet been activated, ACTIVE - Token is active and ready to transact, SUSPENDED - Token is suspended and unable to transact, DEACTIVATED - Token has been permanently deactivated. Max length - 32. Type - String. Conditional - required for notifyTokenUpdated if reasonCode &#x3D; \&quot;STATUS_UPDATE\&quot;. Not present otherwise.</value>
        /// <example>ACTIVE</example>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public string status { get; set; }

        /// <summary>
        /// Gets or Sets events
        /// </summary>
        [DataMember(Name = "events", IsRequired = true, EmitDefaultValue = true)]
        public SuspiciousEvent events { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class NotifySuspiciousEventsRequestSchema {\n");
            sb.Append("  requestId: ").Append(requestId).Append("\n");
            sb.Append("  tokenUniqueReference: ").Append(tokenUniqueReference).Append("\n");
            sb.Append("  paymentAppInstanceId: ").Append(paymentAppInstanceId).Append("\n");
            sb.Append("  status: ").Append(status).Append("\n");
            sb.Append("  events: ").Append(events).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // requestId (string) maxLength
            if (this.requestId != null && this.requestId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for requestId, length must be less than 64.", new [] { "requestId" });
            }

            // requestId (string) minLength
            if (this.requestId != null && this.requestId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for requestId, length must be greater than 1.", new [] { "requestId" });
            }

            // tokenUniqueReference (string) maxLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length > 64)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be less than 64.", new [] { "tokenUniqueReference" });
            }

            // tokenUniqueReference (string) minLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length < 1)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be greater than 1.", new [] { "tokenUniqueReference" });
            }

            // paymentAppInstanceId (string) maxLength
            if (this.paymentAppInstanceId != null && this.paymentAppInstanceId.Length > 48)
            {
                yield return new ValidationResult("Invalid value for paymentAppInstanceId, length must be less than 48.", new [] { "paymentAppInstanceId" });
            }

            // paymentAppInstanceId (string) minLength
            if (this.paymentAppInstanceId != null && this.paymentAppInstanceId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for paymentAppInstanceId, length must be greater than 1.", new [] { "paymentAppInstanceId" });
            }

            // status (string) maxLength
            if (this.status != null && this.status.Length > 32)
            {
                yield return new ValidationResult("Invalid value for status, length must be less than 32.", new [] { "status" });
            }

            // status (string) minLength
            if (this.status != null && this.status.Length < 1)
            {
                yield return new ValidationResult("Invalid value for status, length must be greater than 1.", new [] { "status" });
            }

            yield break;
        }
    }

}
