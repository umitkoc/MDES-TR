/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. All request and response parameters are case sensitive. 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The information that MDES returns for each Token Requestor, when it is enabled for at least one of the Issuer&#39;s input account range
    /// </summary>
    [DataContract(Name = "TokenRequestor")]
    public partial class TokenRequestor : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenRequestor" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenRequestor() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenRequestor" /> class.
        /// </summary>
        /// <param name="tokenRequestorId">Identifies the Token Requestor where the Account must be pushed to. The string contains a 11-digit numeric value. __Length:__ 11  (required).</param>
        /// <param name="name">The legal name of the Token Requestor. __Max Length:__ 64  (required).</param>
        /// <param name="consumerFacingEntityName">The name of the Token Requestor to be displayed to the account holder. __Max Length:__ 100  (required).</param>
        /// <param name="imageAssetId">The image of the Token Requestor (for instance a logo). Provided as an Asset ID â€“ use the Get Asset API to retrieve the actual asset. __Max Length:__ 64 .</param>
        /// <param name="tokenRequestorType">The type of the Token Requestor. __Max Length:__ 32. Must be either:  * MERCHANT: The Token Requestor is a Merchant  * WALLET: The Token Requestor is a Wallet or a Commerce Platform  (required).</param>
        /// <param name="walletId">The identifier of the Wallet Provider. __Length:__ 3 __Conditional,__ Only present when the token is provided to a Wallet Provider. Not present otherwise. .</param>
        /// <param name="enabledAccountRanges">Array of account range start numbers that are enabled for the Token Requestor.The start numbers will be 19 digits in length.  (required).</param>
        /// <param name="supportedPushMethods">Array of the push methods supported by the Token Requestor. __Conditional__. The array is not returned if the Token Requestor does not participate in MDES Token Connect Program. Possible push methods are:  * ANDROID: The Token Requestor supports app-to-app and web-to-app communication on Android.  * IOS: The Token Requestor supports app-to-app and web-to-app communication on iOS.  * WEB: The Token Requestor supports web-to-web or app-to-web communication. .</param>
        /// <param name="supportsMultiplePushedCards">Flag to indicate if Token Requestor supports multiple push account receipts in a single request. When supported, a maximum of 5 receipts may be sent to the Token Requestor in a single request __Conditional__. Must be present if the Token Requestor participates in MDES Token Connect program, not present otherwise. Must be either :  * true: Multiple push receipts are supported.  * false: Multiple push receipts are not supported. .</param>
        /// <param name="supportedAccountHolderData">List (array) of account holder data elements that the Token Requestor accepts to receive from the Issuer with a pushed card or account. __Conditional__. The array is not returned if the Token Requestor does not participate in MDES Token Connect Program. If the Token Requestor participates in MDES Token Connect but doesn&#39;t accept any account holder data then an empty array is returned. __To ensure forward-compatibility, all API client implementations must be resilient to new data element values being added to responses from MDES.__ Possible values are:  * \&quot;NAME\&quot;: The first name and last name of the account holder  * \&quot;ADDRESS\&quot;: The billing address for the account holder  * \&quot;EMAIL_ADDRESS\&quot;: The email address for the account holder  * \&quot;MOBILE_PHONE_NUMBER\&quot;: The mobile phone number for the account holder .</param>
        /// <param name="supportsCardHolderAuthentication">Flag to indicate if token requestor supports cardholder authentication after the token is activated. Must be one of:   * true - Post Tokenization Carholder Authentication (Consent Service) is supported.   * false - Post Tokenization Carholder Authentication (Consent Service) is not supported. .</param>
        /// <param name="supportsTokenConnect">A boolean parameter indicate that token requestor supports Token Connect or not. Must be one of: * true - Token Connect is supported * false - Token Connect is not supported .</param>
        /// <param name="availablePushMethods">Array of push methods supported by the token requestor..</param>
        /// <param name="supportIssuerInitiatedDigitizationData">A boolean parameter indicate that token requestor supports Issuer Initiated Digitization Data. or not. Must be one of: * true - Issuer Initiated Digitization Data is supported * false - Issuer Initiated Digitization Data is not supported .</param>
        public TokenRequestor(string tokenRequestorId = default(string), string name = default(string), string consumerFacingEntityName = default(string), string imageAssetId = default(string), string tokenRequestorType = default(string), string walletId = default(string), List<long> enabledAccountRanges = default(List<long>), List<string> supportedPushMethods = default(List<string>), bool supportsMultiplePushedCards = default(bool), List<string> supportedAccountHolderData = default(List<string>), bool supportsCardHolderAuthentication = default(bool), bool supportsTokenConnect = default(bool), List<PushMethod> availablePushMethods = default(List<PushMethod>), bool supportIssuerInitiatedDigitizationData = default(bool))
        {
            // to ensure "tokenRequestorId" is required (not null)
            if (tokenRequestorId == null)
            {
                throw new ArgumentNullException("tokenRequestorId is a required property for TokenRequestor and cannot be null");
            }
            this.tokenRequestorId = tokenRequestorId;
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new ArgumentNullException("name is a required property for TokenRequestor and cannot be null");
            }
            this.name = name;
            // to ensure "consumerFacingEntityName" is required (not null)
            if (consumerFacingEntityName == null)
            {
                throw new ArgumentNullException("consumerFacingEntityName is a required property for TokenRequestor and cannot be null");
            }
            this.consumerFacingEntityName = consumerFacingEntityName;
            // to ensure "tokenRequestorType" is required (not null)
            if (tokenRequestorType == null)
            {
                throw new ArgumentNullException("tokenRequestorType is a required property for TokenRequestor and cannot be null");
            }
            this.tokenRequestorType = tokenRequestorType;
            // to ensure "enabledAccountRanges" is required (not null)
            if (enabledAccountRanges == null)
            {
                throw new ArgumentNullException("enabledAccountRanges is a required property for TokenRequestor and cannot be null");
            }
            this.enabledAccountRanges = enabledAccountRanges;
            this.imageAssetId = imageAssetId;
            this.walletId = walletId;
            this.supportedPushMethods = supportedPushMethods;
            this.supportsMultiplePushedCards = supportsMultiplePushedCards;
            this.supportedAccountHolderData = supportedAccountHolderData;
            this.supportsCardHolderAuthentication = supportsCardHolderAuthentication;
            this.supportsTokenConnect = supportsTokenConnect;
            this.availablePushMethods = availablePushMethods;
            this.supportIssuerInitiatedDigitizationData = supportIssuerInitiatedDigitizationData;
        }

        /// <summary>
        /// Identifies the Token Requestor where the Account must be pushed to. The string contains a 11-digit numeric value. __Length:__ 11 
        /// </summary>
        /// <value>Identifies the Token Requestor where the Account must be pushed to. The string contains a 11-digit numeric value. __Length:__ 11 </value>
        /// <example>50123456789</example>
        [DataMember(Name = "tokenRequestorId", IsRequired = true, EmitDefaultValue = true)]
        public string tokenRequestorId { get; set; }

        /// <summary>
        /// The legal name of the Token Requestor. __Max Length:__ 64 
        /// </summary>
        /// <value>The legal name of the Token Requestor. __Max Length:__ 64 </value>
        /// <example>Sunrise Ave. Ltd</example>
        [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
        public string name { get; set; }

        /// <summary>
        /// The name of the Token Requestor to be displayed to the account holder. __Max Length:__ 100 
        /// </summary>
        /// <value>The name of the Token Requestor to be displayed to the account holder. __Max Length:__ 100 </value>
        /// <example>Happy Sunrise Online</example>
        [DataMember(Name = "consumerFacingEntityName", IsRequired = true, EmitDefaultValue = true)]
        public string consumerFacingEntityName { get; set; }

        /// <summary>
        /// The image of the Token Requestor (for instance a logo). Provided as an Asset ID â€“ use the Get Asset API to retrieve the actual asset. __Max Length:__ 64 
        /// </summary>
        /// <value>The image of the Token Requestor (for instance a logo). Provided as an Asset ID â€“ use the Get Asset API to retrieve the actual asset. __Max Length:__ 64 </value>
        /// <example>dbc55444-496a-4896-b41c-5d5e2dd431e2</example>
        [DataMember(Name = "imageAssetId", EmitDefaultValue = false)]
        public string imageAssetId { get; set; }

        /// <summary>
        /// The type of the Token Requestor. __Max Length:__ 32. Must be either:  * MERCHANT: The Token Requestor is a Merchant  * WALLET: The Token Requestor is a Wallet or a Commerce Platform 
        /// </summary>
        /// <value>The type of the Token Requestor. __Max Length:__ 32. Must be either:  * MERCHANT: The Token Requestor is a Merchant  * WALLET: The Token Requestor is a Wallet or a Commerce Platform </value>
        /// <example>MERCHANT</example>
        [DataMember(Name = "tokenRequestorType", IsRequired = true, EmitDefaultValue = true)]
        public string tokenRequestorType { get; set; }

        /// <summary>
        /// The identifier of the Wallet Provider. __Length:__ 3 __Conditional,__ Only present when the token is provided to a Wallet Provider. Not present otherwise. 
        /// </summary>
        /// <value>The identifier of the Wallet Provider. __Length:__ 3 __Conditional,__ Only present when the token is provided to a Wallet Provider. Not present otherwise. </value>
        /// <example>123</example>
        [DataMember(Name = "walletId", EmitDefaultValue = false)]
        public string walletId { get; set; }

        /// <summary>
        /// Array of account range start numbers that are enabled for the Token Requestor.The start numbers will be 19 digits in length. 
        /// </summary>
        /// <value>Array of account range start numbers that are enabled for the Token Requestor.The start numbers will be 19 digits in length. </value>
        [DataMember(Name = "enabledAccountRanges", IsRequired = true, EmitDefaultValue = true)]
        public List<long> enabledAccountRanges { get; set; }

        /// <summary>
        /// Array of the push methods supported by the Token Requestor. __Conditional__. The array is not returned if the Token Requestor does not participate in MDES Token Connect Program. Possible push methods are:  * ANDROID: The Token Requestor supports app-to-app and web-to-app communication on Android.  * IOS: The Token Requestor supports app-to-app and web-to-app communication on iOS.  * WEB: The Token Requestor supports web-to-web or app-to-web communication. 
        /// </summary>
        /// <value>Array of the push methods supported by the Token Requestor. __Conditional__. The array is not returned if the Token Requestor does not participate in MDES Token Connect Program. Possible push methods are:  * ANDROID: The Token Requestor supports app-to-app and web-to-app communication on Android.  * IOS: The Token Requestor supports app-to-app and web-to-app communication on iOS.  * WEB: The Token Requestor supports web-to-web or app-to-web communication. </value>
        [DataMember(Name = "supportedPushMethods", EmitDefaultValue = false)]
        public List<string> supportedPushMethods { get; set; }

        /// <summary>
        /// Flag to indicate if Token Requestor supports multiple push account receipts in a single request. When supported, a maximum of 5 receipts may be sent to the Token Requestor in a single request __Conditional__. Must be present if the Token Requestor participates in MDES Token Connect program, not present otherwise. Must be either :  * true: Multiple push receipts are supported.  * false: Multiple push receipts are not supported. 
        /// </summary>
        /// <value>Flag to indicate if Token Requestor supports multiple push account receipts in a single request. When supported, a maximum of 5 receipts may be sent to the Token Requestor in a single request __Conditional__. Must be present if the Token Requestor participates in MDES Token Connect program, not present otherwise. Must be either :  * true: Multiple push receipts are supported.  * false: Multiple push receipts are not supported. </value>
        /// <example>true</example>
        [DataMember(Name = "supportsMultiplePushedCards", EmitDefaultValue = true)]
        public bool supportsMultiplePushedCards { get; set; }

        /// <summary>
        /// List (array) of account holder data elements that the Token Requestor accepts to receive from the Issuer with a pushed card or account. __Conditional__. The array is not returned if the Token Requestor does not participate in MDES Token Connect Program. If the Token Requestor participates in MDES Token Connect but doesn&#39;t accept any account holder data then an empty array is returned. __To ensure forward-compatibility, all API client implementations must be resilient to new data element values being added to responses from MDES.__ Possible values are:  * \&quot;NAME\&quot;: The first name and last name of the account holder  * \&quot;ADDRESS\&quot;: The billing address for the account holder  * \&quot;EMAIL_ADDRESS\&quot;: The email address for the account holder  * \&quot;MOBILE_PHONE_NUMBER\&quot;: The mobile phone number for the account holder 
        /// </summary>
        /// <value>List (array) of account holder data elements that the Token Requestor accepts to receive from the Issuer with a pushed card or account. __Conditional__. The array is not returned if the Token Requestor does not participate in MDES Token Connect Program. If the Token Requestor participates in MDES Token Connect but doesn&#39;t accept any account holder data then an empty array is returned. __To ensure forward-compatibility, all API client implementations must be resilient to new data element values being added to responses from MDES.__ Possible values are:  * \&quot;NAME\&quot;: The first name and last name of the account holder  * \&quot;ADDRESS\&quot;: The billing address for the account holder  * \&quot;EMAIL_ADDRESS\&quot;: The email address for the account holder  * \&quot;MOBILE_PHONE_NUMBER\&quot;: The mobile phone number for the account holder </value>
        [DataMember(Name = "supportedAccountHolderData", EmitDefaultValue = false)]
        public List<string> supportedAccountHolderData { get; set; }

        /// <summary>
        /// Flag to indicate if token requestor supports cardholder authentication after the token is activated. Must be one of:   * true - Post Tokenization Carholder Authentication (Consent Service) is supported.   * false - Post Tokenization Carholder Authentication (Consent Service) is not supported. 
        /// </summary>
        /// <value>Flag to indicate if token requestor supports cardholder authentication after the token is activated. Must be one of:   * true - Post Tokenization Carholder Authentication (Consent Service) is supported.   * false - Post Tokenization Carholder Authentication (Consent Service) is not supported. </value>
        /// <example>true</example>
        [DataMember(Name = "supportsCardHolderAuthentication", EmitDefaultValue = true)]
        public bool supportsCardHolderAuthentication { get; set; }

        /// <summary>
        /// A boolean parameter indicate that token requestor supports Token Connect or not. Must be one of: * true - Token Connect is supported * false - Token Connect is not supported 
        /// </summary>
        /// <value>A boolean parameter indicate that token requestor supports Token Connect or not. Must be one of: * true - Token Connect is supported * false - Token Connect is not supported </value>
        /// <example>true</example>
        [DataMember(Name = "supportsTokenConnect", EmitDefaultValue = true)]
        public bool supportsTokenConnect { get; set; }

        /// <summary>
        /// Array of push methods supported by the token requestor.
        /// </summary>
        /// <value>Array of push methods supported by the token requestor.</value>
        [DataMember(Name = "availablePushMethods", EmitDefaultValue = false)]
        public List<PushMethod> availablePushMethods { get; set; }

        /// <summary>
        /// A boolean parameter indicate that token requestor supports Issuer Initiated Digitization Data. or not. Must be one of: * true - Issuer Initiated Digitization Data is supported * false - Issuer Initiated Digitization Data is not supported 
        /// </summary>
        /// <value>A boolean parameter indicate that token requestor supports Issuer Initiated Digitization Data. or not. Must be one of: * true - Issuer Initiated Digitization Data is supported * false - Issuer Initiated Digitization Data is not supported </value>
        /// <example>false</example>
        [DataMember(Name = "supportIssuerInitiatedDigitizationData", EmitDefaultValue = true)]
        public bool supportIssuerInitiatedDigitizationData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenRequestor {\n");
            sb.Append("  tokenRequestorId: ").Append(tokenRequestorId).Append("\n");
            sb.Append("  name: ").Append(name).Append("\n");
            sb.Append("  consumerFacingEntityName: ").Append(consumerFacingEntityName).Append("\n");
            sb.Append("  imageAssetId: ").Append(imageAssetId).Append("\n");
            sb.Append("  tokenRequestorType: ").Append(tokenRequestorType).Append("\n");
            sb.Append("  walletId: ").Append(walletId).Append("\n");
            sb.Append("  enabledAccountRanges: ").Append(enabledAccountRanges).Append("\n");
            sb.Append("  supportedPushMethods: ").Append(supportedPushMethods).Append("\n");
            sb.Append("  supportsMultiplePushedCards: ").Append(supportsMultiplePushedCards).Append("\n");
            sb.Append("  supportedAccountHolderData: ").Append(supportedAccountHolderData).Append("\n");
            sb.Append("  supportsCardHolderAuthentication: ").Append(supportsCardHolderAuthentication).Append("\n");
            sb.Append("  supportsTokenConnect: ").Append(supportsTokenConnect).Append("\n");
            sb.Append("  availablePushMethods: ").Append(availablePushMethods).Append("\n");
            sb.Append("  supportIssuerInitiatedDigitizationData: ").Append(supportIssuerInitiatedDigitizationData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
