/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains information about the target device to be provisioned. Max length - Not applicable. Type - Map (DeviceInfo).
    /// </summary>
    [DataContract(Name = "deviceInfo")]
    public partial class DeviceInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceInfo" /> class.
        /// </summary>
        /// <param name="deviceName">The name that the Account holder has associated to the device with the Payment App Provider..</param>
        /// <param name="serialNumber">The serial number of the device. May be masked..</param>
        /// <param name="formFactor">The form factor of the device to be provisioned. New values can be added without notice and should be accpeted. Must be one of; PHONE &#x3D; Mobile phone, TABLET &#x3D; Tablet computer, TABLET_OR_EREADER &#x3D; Tablet computer or e-reader, WATCH &#x3D; Watch, WATCH_OR_WRISTBAND &#x3D; Watch or wristband, including a fitness band, smart strap, disposable band, watch add-on, security/ ID Band, CARD &#x3D; Card, STICKER &#x3D; Sticker, PC &#x3D; PC or Laptop, DEVICE_PERIPHERAL &#x3D; Device peripherals, such as a mobile phone case or sleeve, TAG &#x3D; Tag, such as a key fob or mobile tag, JEWELRY &#x3D; Jewelry, such as a ring, bracelet, necklace and cuff links, FASHION_ACCESSORY &#x3D; Fashion accessory, such as a handbag, bag charm, glasses, GARMENT &#x3D; Garment, such as a dress, DOMESTIC_APPLIANCE &#x3D; Domestic appliance, such as a refrigerator, washing machine, VEHICLE &#x3D; Vehicle, including vehicle attached devices, MEDIA_OR_GAMING_DEVICE &#x3D; Media or gaming device, including a set top box, media player, television, UNDEFINED &#x3D; Device type that is not yet defined. Used for wallets introducing a new device type that is not yet public knowledge..</param>
        /// <param name="isoDeviceType">The 2 digit device type provided on the iso messages that the token is being provisioned to. Only present when provided by a Wallet Provider. See Global Communication bulletins for values..</param>
        /// <param name="osName">The name of the device operating system. Must be one of; ANDROID &#x3D; Google Android operating system, WINDOWS &#x3D; Microsoft Windows operating system, TIZEN &#x3D; Tizen operating system, IOS &#x3D; Apple iOS operating system, PAGARE_EMBEDDED_OS &#x3D; FitPay embedded operating system, ANDROID_WEAR &#x3D; Android wear operating system, EMBEDDED_OS &#x3D; All Embedded operating system and Real time Operating systems..</param>
        /// <param name="osVersion">The version of the device operating system..</param>
        /// <param name="imei">The IMEI number of the device being provisioned..</param>
        /// <param name="msisdn">The MSISDN of the device being provisioned. Type - String..</param>
        /// <param name="paymentTypes">Different types of Payments supported for the token. Must be one of; NFC &#x3D; The token is NFC capable, DSRP &#x3D; The token is DSRP capable, ECOMMERCE &#x3D; The token can be used for e-commerce transactions. Max length - Not applicable. Type - Array [String]..</param>
        /// <param name="storageTechnology">The architecture or technology used for token storage. Must be one of DEVICE_MEMORY - Device memory, DEVICE_MEMORY_PROTECTED_TPM - Device memory using a protected trust platform module, TEE - Trusted execution environment, SE - Secure element, SERVER - Server host, or VEE - Virtual Execution Environment..</param>
        /// <param name="cardCaptureTechnology">TThe technology used to capture the card details. New values can be added at any time and must not result in an error. Must be one of CAMERA &#x3D; The card details were captured using the device camera, MANUAL &#x3D; The card details were manually entered, UNKNOWN &#x3D; It is not known how the card details were entered, READER_MODE &#x3D; The card details were captured using reader mode..</param>
        public DeviceInfo(string deviceName = default(string), string serialNumber = default(string), string formFactor = default(string), string isoDeviceType = default(string), string osName = default(string), string osVersion = default(string), string imei = default(string), string msisdn = default(string), List<string> paymentTypes = default(List<string>), string storageTechnology = default(string), string cardCaptureTechnology = default(string))
        {
            this.deviceName = deviceName;
            this.serialNumber = serialNumber;
            this.formFactor = formFactor;
            this.isoDeviceType = isoDeviceType;
            this.osName = osName;
            this.osVersion = osVersion;
            this.imei = imei;
            this.msisdn = msisdn;
            this.paymentTypes = paymentTypes;
            this.storageTechnology = storageTechnology;
            this.cardCaptureTechnology = cardCaptureTechnology;
        }

        /// <summary>
        /// The name that the Account holder has associated to the device with the Payment App Provider.
        /// </summary>
        /// <value>The name that the Account holder has associated to the device with the Payment App Provider.</value>
        /// <example>My Phone</example>
        [DataMember(Name = "deviceName", EmitDefaultValue = false)]
        public string deviceName { get; set; }

        /// <summary>
        /// The serial number of the device. May be masked.
        /// </summary>
        /// <value>The serial number of the device. May be masked.</value>
        /// <example>2F6D63</example>
        [DataMember(Name = "serialNumber", EmitDefaultValue = false)]
        public string serialNumber { get; set; }

        /// <summary>
        /// The form factor of the device to be provisioned. New values can be added without notice and should be accpeted. Must be one of; PHONE &#x3D; Mobile phone, TABLET &#x3D; Tablet computer, TABLET_OR_EREADER &#x3D; Tablet computer or e-reader, WATCH &#x3D; Watch, WATCH_OR_WRISTBAND &#x3D; Watch or wristband, including a fitness band, smart strap, disposable band, watch add-on, security/ ID Band, CARD &#x3D; Card, STICKER &#x3D; Sticker, PC &#x3D; PC or Laptop, DEVICE_PERIPHERAL &#x3D; Device peripherals, such as a mobile phone case or sleeve, TAG &#x3D; Tag, such as a key fob or mobile tag, JEWELRY &#x3D; Jewelry, such as a ring, bracelet, necklace and cuff links, FASHION_ACCESSORY &#x3D; Fashion accessory, such as a handbag, bag charm, glasses, GARMENT &#x3D; Garment, such as a dress, DOMESTIC_APPLIANCE &#x3D; Domestic appliance, such as a refrigerator, washing machine, VEHICLE &#x3D; Vehicle, including vehicle attached devices, MEDIA_OR_GAMING_DEVICE &#x3D; Media or gaming device, including a set top box, media player, television, UNDEFINED &#x3D; Device type that is not yet defined. Used for wallets introducing a new device type that is not yet public knowledge.
        /// </summary>
        /// <value>The form factor of the device to be provisioned. New values can be added without notice and should be accpeted. Must be one of; PHONE &#x3D; Mobile phone, TABLET &#x3D; Tablet computer, TABLET_OR_EREADER &#x3D; Tablet computer or e-reader, WATCH &#x3D; Watch, WATCH_OR_WRISTBAND &#x3D; Watch or wristband, including a fitness band, smart strap, disposable band, watch add-on, security/ ID Band, CARD &#x3D; Card, STICKER &#x3D; Sticker, PC &#x3D; PC or Laptop, DEVICE_PERIPHERAL &#x3D; Device peripherals, such as a mobile phone case or sleeve, TAG &#x3D; Tag, such as a key fob or mobile tag, JEWELRY &#x3D; Jewelry, such as a ring, bracelet, necklace and cuff links, FASHION_ACCESSORY &#x3D; Fashion accessory, such as a handbag, bag charm, glasses, GARMENT &#x3D; Garment, such as a dress, DOMESTIC_APPLIANCE &#x3D; Domestic appliance, such as a refrigerator, washing machine, VEHICLE &#x3D; Vehicle, including vehicle attached devices, MEDIA_OR_GAMING_DEVICE &#x3D; Media or gaming device, including a set top box, media player, television, UNDEFINED &#x3D; Device type that is not yet defined. Used for wallets introducing a new device type that is not yet public knowledge.</value>
        /// <example>PHONE</example>
        [DataMember(Name = "formFactor", EmitDefaultValue = false)]
        public string formFactor { get; set; }

        /// <summary>
        /// The 2 digit device type provided on the iso messages that the token is being provisioned to. Only present when provided by a Wallet Provider. See Global Communication bulletins for values.
        /// </summary>
        /// <value>The 2 digit device type provided on the iso messages that the token is being provisioned to. Only present when provided by a Wallet Provider. See Global Communication bulletins for values.</value>
        /// <example>09</example>
        [DataMember(Name = "isoDeviceType", EmitDefaultValue = false)]
        public string isoDeviceType { get; set; }

        /// <summary>
        /// The name of the device operating system. Must be one of; ANDROID &#x3D; Google Android operating system, WINDOWS &#x3D; Microsoft Windows operating system, TIZEN &#x3D; Tizen operating system, IOS &#x3D; Apple iOS operating system, PAGARE_EMBEDDED_OS &#x3D; FitPay embedded operating system, ANDROID_WEAR &#x3D; Android wear operating system, EMBEDDED_OS &#x3D; All Embedded operating system and Real time Operating systems.
        /// </summary>
        /// <value>The name of the device operating system. Must be one of; ANDROID &#x3D; Google Android operating system, WINDOWS &#x3D; Microsoft Windows operating system, TIZEN &#x3D; Tizen operating system, IOS &#x3D; Apple iOS operating system, PAGARE_EMBEDDED_OS &#x3D; FitPay embedded operating system, ANDROID_WEAR &#x3D; Android wear operating system, EMBEDDED_OS &#x3D; All Embedded operating system and Real time Operating systems.</value>
        /// <example>ANDROID</example>
        [DataMember(Name = "osName", EmitDefaultValue = false)]
        public string osName { get; set; }

        /// <summary>
        /// The version of the device operating system.
        /// </summary>
        /// <value>The version of the device operating system.</value>
        /// <example>4.4.4</example>
        [DataMember(Name = "osVersion", EmitDefaultValue = false)]
        public string osVersion { get; set; }

        /// <summary>
        /// The IMEI number of the device being provisioned.
        /// </summary>
        /// <value>The IMEI number of the device being provisioned.</value>
        /// <example>352099001761481</example>
        [DataMember(Name = "imei", EmitDefaultValue = false)]
        public string imei { get; set; }

        /// <summary>
        /// The MSISDN of the device being provisioned. Type - String.
        /// </summary>
        /// <value>The MSISDN of the device being provisioned. Type - String.</value>
        /// <example>7307406945</example>
        [DataMember(Name = "msisdn", EmitDefaultValue = false)]
        public string msisdn { get; set; }

        /// <summary>
        /// Different types of Payments supported for the token. Must be one of; NFC &#x3D; The token is NFC capable, DSRP &#x3D; The token is DSRP capable, ECOMMERCE &#x3D; The token can be used for e-commerce transactions. Max length - Not applicable. Type - Array [String].
        /// </summary>
        /// <value>Different types of Payments supported for the token. Must be one of; NFC &#x3D; The token is NFC capable, DSRP &#x3D; The token is DSRP capable, ECOMMERCE &#x3D; The token can be used for e-commerce transactions. Max length - Not applicable. Type - Array [String].</value>
        [DataMember(Name = "paymentTypes", EmitDefaultValue = false)]
        public List<string> paymentTypes { get; set; }

        /// <summary>
        /// The architecture or technology used for token storage. Must be one of DEVICE_MEMORY - Device memory, DEVICE_MEMORY_PROTECTED_TPM - Device memory using a protected trust platform module, TEE - Trusted execution environment, SE - Secure element, SERVER - Server host, or VEE - Virtual Execution Environment.
        /// </summary>
        /// <value>The architecture or technology used for token storage. Must be one of DEVICE_MEMORY - Device memory, DEVICE_MEMORY_PROTECTED_TPM - Device memory using a protected trust platform module, TEE - Trusted execution environment, SE - Secure element, SERVER - Server host, or VEE - Virtual Execution Environment.</value>
        /// <example>SE</example>
        [DataMember(Name = "storageTechnology", EmitDefaultValue = false)]
        public string storageTechnology { get; set; }

        /// <summary>
        /// TThe technology used to capture the card details. New values can be added at any time and must not result in an error. Must be one of CAMERA &#x3D; The card details were captured using the device camera, MANUAL &#x3D; The card details were manually entered, UNKNOWN &#x3D; It is not known how the card details were entered, READER_MODE &#x3D; The card details were captured using reader mode.
        /// </summary>
        /// <value>TThe technology used to capture the card details. New values can be added at any time and must not result in an error. Must be one of CAMERA &#x3D; The card details were captured using the device camera, MANUAL &#x3D; The card details were manually entered, UNKNOWN &#x3D; It is not known how the card details were entered, READER_MODE &#x3D; The card details were captured using reader mode.</value>
        /// <example>CAMERA</example>
        [DataMember(Name = "cardCaptureTechnology", EmitDefaultValue = false)]
        public string cardCaptureTechnology { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeviceInfo {\n");
            sb.Append("  deviceName: ").Append(deviceName).Append("\n");
            sb.Append("  serialNumber: ").Append(serialNumber).Append("\n");
            sb.Append("  formFactor: ").Append(formFactor).Append("\n");
            sb.Append("  isoDeviceType: ").Append(isoDeviceType).Append("\n");
            sb.Append("  osName: ").Append(osName).Append("\n");
            sb.Append("  osVersion: ").Append(osVersion).Append("\n");
            sb.Append("  imei: ").Append(imei).Append("\n");
            sb.Append("  msisdn: ").Append(msisdn).Append("\n");
            sb.Append("  paymentTypes: ").Append(paymentTypes).Append("\n");
            sb.Append("  storageTechnology: ").Append(storageTechnology).Append("\n");
            sb.Append("  cardCaptureTechnology: ").Append(cardCaptureTechnology).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // deviceName (string) maxLength
            if (this.deviceName != null && this.deviceName.Length > 64)
            {
                yield return new ValidationResult("Invalid value for deviceName, length must be less than 64.", new [] { "deviceName" });
            }

            // deviceName (string) minLength
            if (this.deviceName != null && this.deviceName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for deviceName, length must be greater than 1.", new [] { "deviceName" });
            }

            // serialNumber (string) maxLength
            if (this.serialNumber != null && this.serialNumber.Length > 64)
            {
                yield return new ValidationResult("Invalid value for serialNumber, length must be less than 64.", new [] { "serialNumber" });
            }

            // serialNumber (string) minLength
            if (this.serialNumber != null && this.serialNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for serialNumber, length must be greater than 1.", new [] { "serialNumber" });
            }

            // formFactor (string) maxLength
            if (this.formFactor != null && this.formFactor.Length > 64)
            {
                yield return new ValidationResult("Invalid value for formFactor, length must be less than 64.", new [] { "formFactor" });
            }

            // formFactor (string) minLength
            if (this.formFactor != null && this.formFactor.Length < 1)
            {
                yield return new ValidationResult("Invalid value for formFactor, length must be greater than 1.", new [] { "formFactor" });
            }

            // isoDeviceType (string) maxLength
            if (this.isoDeviceType != null && this.isoDeviceType.Length > 2)
            {
                yield return new ValidationResult("Invalid value for isoDeviceType, length must be less than 2.", new [] { "isoDeviceType" });
            }

            // isoDeviceType (string) minLength
            if (this.isoDeviceType != null && this.isoDeviceType.Length < 1)
            {
                yield return new ValidationResult("Invalid value for isoDeviceType, length must be greater than 1.", new [] { "isoDeviceType" });
            }

            // osName (string) maxLength
            if (this.osName != null && this.osName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for osName, length must be less than 32.", new [] { "osName" });
            }

            // osName (string) minLength
            if (this.osName != null && this.osName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for osName, length must be greater than 1.", new [] { "osName" });
            }

            // osVersion (string) maxLength
            if (this.osVersion != null && this.osVersion.Length > 32)
            {
                yield return new ValidationResult("Invalid value for osVersion, length must be less than 32.", new [] { "osVersion" });
            }

            // osVersion (string) minLength
            if (this.osVersion != null && this.osVersion.Length < 1)
            {
                yield return new ValidationResult("Invalid value for osVersion, length must be greater than 1.", new [] { "osVersion" });
            }

            // imei (string) maxLength
            if (this.imei != null && this.imei.Length > 15)
            {
                yield return new ValidationResult("Invalid value for imei, length must be less than 15.", new [] { "imei" });
            }

            // imei (string) minLength
            if (this.imei != null && this.imei.Length < 15)
            {
                yield return new ValidationResult("Invalid value for imei, length must be greater than 15.", new [] { "imei" });
            }

            // msisdn (string) maxLength
            if (this.msisdn != null && this.msisdn.Length > 15)
            {
                yield return new ValidationResult("Invalid value for msisdn, length must be less than 15.", new [] { "msisdn" });
            }

            // msisdn (string) minLength
            if (this.msisdn != null && this.msisdn.Length < 1)
            {
                yield return new ValidationResult("Invalid value for msisdn, length must be greater than 1.", new [] { "msisdn" });
            }

            // storageTechnology (string) maxLength
            if (this.storageTechnology != null && this.storageTechnology.Length > 32)
            {
                yield return new ValidationResult("Invalid value for storageTechnology, length must be less than 32.", new [] { "storageTechnology" });
            }

            // storageTechnology (string) minLength
            if (this.storageTechnology != null && this.storageTechnology.Length < 1)
            {
                yield return new ValidationResult("Invalid value for storageTechnology, length must be greater than 1.", new [] { "storageTechnology" });
            }

            // cardCaptureTechnology (string) maxLength
            if (this.cardCaptureTechnology != null && this.cardCaptureTechnology.Length > 32)
            {
                yield return new ValidationResult("Invalid value for cardCaptureTechnology, length must be less than 32.", new [] { "cardCaptureTechnology" });
            }

            // cardCaptureTechnology (string) minLength
            if (this.cardCaptureTechnology != null && this.cardCaptureTechnology.Length < 1)
            {
                yield return new ValidationResult("Invalid value for cardCaptureTechnology, length must be greater than 1.", new [] { "cardCaptureTechnology" });
            }

            yield break;
        }
    }

}
