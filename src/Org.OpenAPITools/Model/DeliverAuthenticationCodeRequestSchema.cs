/*
 * Authentication Facilitator API
 *
 * This API provides our Issuer partners with authentication codes they have to deliver to their cardholders.
 *
 * The version of the OpenAPI document: 1.2
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeliverAuthenticationCodeRequestSchema
    /// </summary>
    [DataContract(Name = "deliverAuthenticationCodeRequestSchema")]
    public partial class DeliverAuthenticationCodeRequestSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliverAuthenticationCodeRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliverAuthenticationCodeRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliverAuthenticationCodeRequestSchema" /> class.
        /// </summary>
        /// <param name="requestId">Unique identifier for the request message.&lt;br&gt;   __Max length - 64__ (required).</param>
        /// <param name="authenticationFlowId">A unique id to identify the flow to authenticate an account holder. Value linking messages for a single authentication request.&lt;br&gt;  __Max length - 128__ (required).</param>
        /// <param name="authenticationCode">The code to be distributed for the authentication.&lt;br&gt;  __Max length - 32__ (required).</param>
        /// <param name="expirationDateTime">The date and time when the authentication code is no longer valid. Expressed in ISO 8601 extended format. Must be either * YYYY-MM-DDThh:mm:ss[.sss]Z * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm where [.sss] is optional and can be 1 to 3 digits.&lt;br&gt;  __Max length - 29__  (required).</param>
        /// <param name="reasonCode">The reason the account holder is being authenticated. The reason could impact the generation and validation of the code in a number of ways including but not limited to the time period of validity of the code and the number of attempts allowed to validate the code. New reason codes can be added at any time, and this should not result in a failure. Must be either   * &#39;PAYMENT_TRANSACTION&#39; (Account holder being authenticated in order to perform a payment transaction)  * &#39;OTHER&#39; (Account holder being authenticated for a reason not enumerated in this list) &lt;br&gt;  __Max length - 64__  (required).</param>
        /// <param name="fundingAccountInfo">fundingAccountInfo (required).</param>
        /// <param name="tokenRequestorId">The party that requested the digitization. &lt;br&gt; __Max length - 11(Exact)__ (required).</param>
        /// <param name="walletId">The identifier of the Wallet Provider who requested the digitization. &lt;br&gt; __Max length - 3__.</param>
        /// <param name="paymentAppInstanceId">The identifier of the Payment App instance within a device that will be provisioned with a token. Only present when supplied by a Wallet Provider. &lt;br&gt; __Max length - 64__.</param>
        /// <param name="paymentAppName">Identifier for the Payment App, unique per app as assigned by Mastercard for this Payment App. &lt;br&gt; __Max length - 64__.</param>
        /// <param name="consumerFacingEntityName">The name of the token requestor to be displayed to the account holder. &lt;br&gt; __Max length - 100__.</param>
        public DeliverAuthenticationCodeRequestSchema(string requestId = default(string), string authenticationFlowId = default(string), string authenticationCode = default(string), string expirationDateTime = default(string), string reasonCode = default(string), FundingAccountInfoSchema1 fundingAccountInfo = default(FundingAccountInfoSchema1), string tokenRequestorId = default(string), string walletId = default(string), string paymentAppInstanceId = default(string), string paymentAppName = default(string), string consumerFacingEntityName = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.requestId = requestId;
            // to ensure "authenticationFlowId" is required (not null)
            if (authenticationFlowId == null)
            {
                throw new ArgumentNullException("authenticationFlowId is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.authenticationFlowId = authenticationFlowId;
            // to ensure "authenticationCode" is required (not null)
            if (authenticationCode == null)
            {
                throw new ArgumentNullException("authenticationCode is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.authenticationCode = authenticationCode;
            // to ensure "expirationDateTime" is required (not null)
            if (expirationDateTime == null)
            {
                throw new ArgumentNullException("expirationDateTime is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.expirationDateTime = expirationDateTime;
            // to ensure "reasonCode" is required (not null)
            if (reasonCode == null)
            {
                throw new ArgumentNullException("reasonCode is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.reasonCode = reasonCode;
            // to ensure "fundingAccountInfo" is required (not null)
            if (fundingAccountInfo == null)
            {
                throw new ArgumentNullException("fundingAccountInfo is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.fundingAccountInfo = fundingAccountInfo;
            // to ensure "tokenRequestorId" is required (not null)
            if (tokenRequestorId == null)
            {
                throw new ArgumentNullException("tokenRequestorId is a required property for DeliverAuthenticationCodeRequestSchema and cannot be null");
            }
            this.tokenRequestorId = tokenRequestorId;
            this.walletId = walletId;
            this.paymentAppInstanceId = paymentAppInstanceId;
            this.paymentAppName = paymentAppName;
            this.consumerFacingEntityName = consumerFacingEntityName;
        }

        /// <summary>
        /// Unique identifier for the request message.&lt;br&gt;   __Max length - 64__
        /// </summary>
        /// <value>Unique identifier for the request message.&lt;br&gt;   __Max length - 64__</value>
        /// <example>123456</example>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string requestId { get; set; }

        /// <summary>
        /// A unique id to identify the flow to authenticate an account holder. Value linking messages for a single authentication request.&lt;br&gt;  __Max length - 128__
        /// </summary>
        /// <value>A unique id to identify the flow to authenticate an account holder. Value linking messages for a single authentication request.&lt;br&gt;  __Max length - 128__</value>
        /// <example>D98765432104</example>
        [DataMember(Name = "authenticationFlowId", IsRequired = true, EmitDefaultValue = true)]
        public string authenticationFlowId { get; set; }

        /// <summary>
        /// The code to be distributed for the authentication.&lt;br&gt;  __Max length - 32__
        /// </summary>
        /// <value>The code to be distributed for the authentication.&lt;br&gt;  __Max length - 32__</value>
        /// <example>A1B2C3D4</example>
        [DataMember(Name = "authenticationCode", IsRequired = true, EmitDefaultValue = true)]
        public string authenticationCode { get; set; }

        /// <summary>
        /// The date and time when the authentication code is no longer valid. Expressed in ISO 8601 extended format. Must be either * YYYY-MM-DDThh:mm:ss[.sss]Z * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm where [.sss] is optional and can be 1 to 3 digits.&lt;br&gt;  __Max length - 29__ 
        /// </summary>
        /// <value>The date and time when the authentication code is no longer valid. Expressed in ISO 8601 extended format. Must be either * YYYY-MM-DDThh:mm:ss[.sss]Z * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm where [.sss] is optional and can be 1 to 3 digits.&lt;br&gt;  __Max length - 29__ </value>
        /// <example>2019-07-04T12:08:56.123-07:00</example>
        [DataMember(Name = "expirationDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string expirationDateTime { get; set; }

        /// <summary>
        /// The reason the account holder is being authenticated. The reason could impact the generation and validation of the code in a number of ways including but not limited to the time period of validity of the code and the number of attempts allowed to validate the code. New reason codes can be added at any time, and this should not result in a failure. Must be either   * &#39;PAYMENT_TRANSACTION&#39; (Account holder being authenticated in order to perform a payment transaction)  * &#39;OTHER&#39; (Account holder being authenticated for a reason not enumerated in this list) &lt;br&gt;  __Max length - 64__ 
        /// </summary>
        /// <value>The reason the account holder is being authenticated. The reason could impact the generation and validation of the code in a number of ways including but not limited to the time period of validity of the code and the number of attempts allowed to validate the code. New reason codes can be added at any time, and this should not result in a failure. Must be either   * &#39;PAYMENT_TRANSACTION&#39; (Account holder being authenticated in order to perform a payment transaction)  * &#39;OTHER&#39; (Account holder being authenticated for a reason not enumerated in this list) &lt;br&gt;  __Max length - 64__ </value>
        /// <example>PAYMENT_TRANSACTION</example>
        [DataMember(Name = "reasonCode", IsRequired = true, EmitDefaultValue = true)]
        public string reasonCode { get; set; }

        /// <summary>
        /// Gets or Sets fundingAccountInfo
        /// </summary>
        [DataMember(Name = "fundingAccountInfo", IsRequired = true, EmitDefaultValue = true)]
        public FundingAccountInfoSchema1 fundingAccountInfo { get; set; }

        /// <summary>
        /// The party that requested the digitization. &lt;br&gt; __Max length - 11(Exact)__
        /// </summary>
        /// <value>The party that requested the digitization. &lt;br&gt; __Max length - 11(Exact)__</value>
        /// <example>5412332145</example>
        [DataMember(Name = "tokenRequestorId", IsRequired = true, EmitDefaultValue = true)]
        public string tokenRequestorId { get; set; }

        /// <summary>
        /// The identifier of the Wallet Provider who requested the digitization. &lt;br&gt; __Max length - 3__
        /// </summary>
        /// <value>The identifier of the Wallet Provider who requested the digitization. &lt;br&gt; __Max length - 3__</value>
        /// <example>123</example>
        [DataMember(Name = "walletId", EmitDefaultValue = false)]
        public string walletId { get; set; }

        /// <summary>
        /// The identifier of the Payment App instance within a device that will be provisioned with a token. Only present when supplied by a Wallet Provider. &lt;br&gt; __Max length - 64__
        /// </summary>
        /// <value>The identifier of the Payment App instance within a device that will be provisioned with a token. Only present when supplied by a Wallet Provider. &lt;br&gt; __Max length - 64__</value>
        /// <example>123abd434sdxox13</example>
        [DataMember(Name = "paymentAppInstanceId", EmitDefaultValue = false)]
        public string paymentAppInstanceId { get; set; }

        /// <summary>
        /// Identifier for the Payment App, unique per app as assigned by Mastercard for this Payment App. &lt;br&gt; __Max length - 64__
        /// </summary>
        /// <value>Identifier for the Payment App, unique per app as assigned by Mastercard for this Payment App. &lt;br&gt; __Max length - 64__</value>
        /// <example>My Payment App</example>
        [DataMember(Name = "paymentAppName", EmitDefaultValue = false)]
        public string paymentAppName { get; set; }

        /// <summary>
        /// The name of the token requestor to be displayed to the account holder. &lt;br&gt; __Max length - 100__
        /// </summary>
        /// <value>The name of the token requestor to be displayed to the account holder. &lt;br&gt; __Max length - 100__</value>
        /// <example>Wallet</example>
        [DataMember(Name = "consumerFacingEntityName", EmitDefaultValue = false)]
        public string consumerFacingEntityName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliverAuthenticationCodeRequestSchema {\n");
            sb.Append("  requestId: ").Append(requestId).Append("\n");
            sb.Append("  authenticationFlowId: ").Append(authenticationFlowId).Append("\n");
            sb.Append("  authenticationCode: ").Append(authenticationCode).Append("\n");
            sb.Append("  expirationDateTime: ").Append(expirationDateTime).Append("\n");
            sb.Append("  reasonCode: ").Append(reasonCode).Append("\n");
            sb.Append("  fundingAccountInfo: ").Append(fundingAccountInfo).Append("\n");
            sb.Append("  tokenRequestorId: ").Append(tokenRequestorId).Append("\n");
            sb.Append("  walletId: ").Append(walletId).Append("\n");
            sb.Append("  paymentAppInstanceId: ").Append(paymentAppInstanceId).Append("\n");
            sb.Append("  paymentAppName: ").Append(paymentAppName).Append("\n");
            sb.Append("  consumerFacingEntityName: ").Append(consumerFacingEntityName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
