/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The mobile phone number of the account holder. Not required.
    /// </summary>
    [DataContract(Name = "phoneNumberSchema")]
    public partial class PhoneNumberSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PhoneNumberSchema" /> class.
        /// </summary>
        /// <param name="countryDialInCode">The country code for the phone number. E.g. 1 for US or 44 for UK..</param>
        /// <param name="phoneNumber">The phone number, may contain country code along with phone number when countryDialInCode is not present..</param>
        public PhoneNumberSchema(string countryDialInCode = default(string), string phoneNumber = default(string))
        {
            this.countryDialInCode = countryDialInCode;
            this.phoneNumber = phoneNumber;
        }

        /// <summary>
        /// The country code for the phone number. E.g. 1 for US or 44 for UK.
        /// </summary>
        /// <value>The country code for the phone number. E.g. 1 for US or 44 for UK.</value>
        /// <example>1</example>
        [DataMember(Name = "countryDialInCode", EmitDefaultValue = false)]
        public string countryDialInCode { get; set; }

        /// <summary>
        /// The phone number, may contain country code along with phone number when countryDialInCode is not present.
        /// </summary>
        /// <value>The phone number, may contain country code along with phone number when countryDialInCode is not present.</value>
        /// <example>4692392391</example>
        [DataMember(Name = "phoneNumber", EmitDefaultValue = false)]
        public string phoneNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PhoneNumberSchema {\n");
            sb.Append("  countryDialInCode: ").Append(countryDialInCode).Append("\n");
            sb.Append("  phoneNumber: ").Append(phoneNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // countryDialInCode (string) maxLength
            if (this.countryDialInCode != null && this.countryDialInCode.Length > 4)
            {
                yield return new ValidationResult("Invalid value for countryDialInCode, length must be less than 4.", new [] { "countryDialInCode" });
            }

            // countryDialInCode (string) minLength
            if (this.countryDialInCode != null && this.countryDialInCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for countryDialInCode, length must be greater than 1.", new [] { "countryDialInCode" });
            }

            // phoneNumber (string) maxLength
            if (this.phoneNumber != null && this.phoneNumber.Length > 20)
            {
                yield return new ValidationResult("Invalid value for phoneNumber, length must be less than 20.", new [] { "phoneNumber" });
            }

            // phoneNumber (string) minLength
            if (this.phoneNumber != null && this.phoneNumber.Length < 1)
            {
                yield return new ValidationResult("Invalid value for phoneNumber, length must be greater than 1.", new [] { "phoneNumber" });
            }

            yield break;
        }
    }

}
