/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. All request and response parameters are case sensitive. 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// FundingAccount
    /// </summary>
    [DataContract(Name = "FundingAccount")]
    public partial class FundingAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingAccount" /> class.
        /// </summary>
        /// <param name="cardAccountData">cardAccountData.</param>
        /// <param name="financialAccountData">financialAccountData.</param>
        /// <param name="accountHolderData">accountHolderData.</param>
        /// <param name="dataValidUntilTimestamp">The date/time after which this encrypted payload object is considered invalid. If present, all systems must reject this encrypted object after this time and treat it as invalid data. Must be a value no more than 30 days in the future. Mastercard recommends using a value of (CurrentTime + 30 minutes). __Max length:__ 29. Must be expressed in ISO 8601 extended format as one of the following: * YYYY-MM-DDThh:mm:ss[.sss]Z * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm where [.sss] is optional and can be 1 to 3 digits. .</param>
        public FundingAccount(CardAccount cardAccountData = default(CardAccount), FinancialAccount financialAccountData = default(FinancialAccount), AccountHolder accountHolderData = default(AccountHolder), string dataValidUntilTimestamp = default(string))
        {
            this.cardAccountData = cardAccountData;
            this.financialAccountData = financialAccountData;
            this.accountHolderData = accountHolderData;
            this.dataValidUntilTimestamp = dataValidUntilTimestamp;
        }

        /// <summary>
        /// Gets or Sets cardAccountData
        /// </summary>
        [DataMember(Name = "cardAccountData", EmitDefaultValue = false)]
        public CardAccount cardAccountData { get; set; }

        /// <summary>
        /// Gets or Sets financialAccountData
        /// </summary>
        [DataMember(Name = "financialAccountData", EmitDefaultValue = false)]
        public FinancialAccount financialAccountData { get; set; }

        /// <summary>
        /// Gets or Sets accountHolderData
        /// </summary>
        [DataMember(Name = "accountHolderData", EmitDefaultValue = false)]
        public AccountHolder accountHolderData { get; set; }

        /// <summary>
        /// The date/time after which this encrypted payload object is considered invalid. If present, all systems must reject this encrypted object after this time and treat it as invalid data. Must be a value no more than 30 days in the future. Mastercard recommends using a value of (CurrentTime + 30 minutes). __Max length:__ 29. Must be expressed in ISO 8601 extended format as one of the following: * YYYY-MM-DDThh:mm:ss[.sss]Z * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm where [.sss] is optional and can be 1 to 3 digits. 
        /// </summary>
        /// <value>The date/time after which this encrypted payload object is considered invalid. If present, all systems must reject this encrypted object after this time and treat it as invalid data. Must be a value no more than 30 days in the future. Mastercard recommends using a value of (CurrentTime + 30 minutes). __Max length:__ 29. Must be expressed in ISO 8601 extended format as one of the following: * YYYY-MM-DDThh:mm:ss[.sss]Z * YYYY-MM-DDThh:mm:ss[.sss]±hh:mm where [.sss] is optional and can be 1 to 3 digits. </value>
        /// <example>2019-07-04T12:09:56.123-07:00</example>
        [DataMember(Name = "dataValidUntilTimestamp", EmitDefaultValue = false)]
        public string dataValidUntilTimestamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundingAccount {\n");
            sb.Append("  cardAccountData: ").Append(cardAccountData).Append("\n");
            sb.Append("  financialAccountData: ").Append(financialAccountData).Append("\n");
            sb.Append("  accountHolderData: ").Append(accountHolderData).Append("\n");
            sb.Append("  dataValidUntilTimestamp: ").Append(dataValidUntilTimestamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
