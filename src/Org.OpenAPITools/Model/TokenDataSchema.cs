/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holder’s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The token information. Max length - Not applicable. Conditional – required in NotifyServiceActivated, not present otherwise.
    /// </summary>
    [DataContract(Name = "tokenDataSchema")]
    public partial class TokenDataSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDataSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenDataSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenDataSchema" /> class.
        /// </summary>
        /// <param name="token">The token issued for this service request. (required).</param>
        /// <param name="expiryMonth">The month of the expiration date. (required).</param>
        /// <param name="expiryYear">The year of the expiration date. (required).</param>
        /// <param name="sequenceNumber">Sequence number of the Token. Conditional – required in AuthorizeServiceResponseData. Optional otherwise..</param>
        public TokenDataSchema(string token = default(string), string expiryMonth = default(string), string expiryYear = default(string), string sequenceNumber = default(string))
        {
            // to ensure "token" is required (not null)
            if (token == null)
            {
                throw new ArgumentNullException("token is a required property for TokenDataSchema and cannot be null");
            }
            this.token = token;
            // to ensure "expiryMonth" is required (not null)
            if (expiryMonth == null)
            {
                throw new ArgumentNullException("expiryMonth is a required property for TokenDataSchema and cannot be null");
            }
            this.expiryMonth = expiryMonth;
            // to ensure "expiryYear" is required (not null)
            if (expiryYear == null)
            {
                throw new ArgumentNullException("expiryYear is a required property for TokenDataSchema and cannot be null");
            }
            this.expiryYear = expiryYear;
            this.sequenceNumber = sequenceNumber;
        }

        /// <summary>
        /// The token issued for this service request.
        /// </summary>
        /// <value>The token issued for this service request.</value>
        /// <example>5345678901234521</example>
        [DataMember(Name = "token", IsRequired = true, EmitDefaultValue = true)]
        public string token { get; set; }

        /// <summary>
        /// The month of the expiration date.
        /// </summary>
        /// <value>The month of the expiration date.</value>
        /// <example>10</example>
        [DataMember(Name = "expiryMonth", IsRequired = true, EmitDefaultValue = true)]
        public string expiryMonth { get; set; }

        /// <summary>
        /// The year of the expiration date.
        /// </summary>
        /// <value>The year of the expiration date.</value>
        /// <example>26</example>
        [DataMember(Name = "expiryYear", IsRequired = true, EmitDefaultValue = true)]
        public string expiryYear { get; set; }

        /// <summary>
        /// Sequence number of the Token. Conditional – required in AuthorizeServiceResponseData. Optional otherwise.
        /// </summary>
        /// <value>Sequence number of the Token. Conditional – required in AuthorizeServiceResponseData. Optional otherwise.</value>
        /// <example>17</example>
        [DataMember(Name = "sequenceNumber", EmitDefaultValue = false)]
        public string sequenceNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TokenDataSchema {\n");
            sb.Append("  token: ").Append(token).Append("\n");
            sb.Append("  expiryMonth: ").Append(expiryMonth).Append("\n");
            sb.Append("  expiryYear: ").Append(expiryYear).Append("\n");
            sb.Append("  sequenceNumber: ").Append(sequenceNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // token (string) maxLength
            if (this.token != null && this.token.Length > 19)
            {
                yield return new ValidationResult("Invalid value for token, length must be less than 19.", new [] { "token" });
            }

            // token (string) minLength
            if (this.token != null && this.token.Length < 12)
            {
                yield return new ValidationResult("Invalid value for token, length must be greater than 12.", new [] { "token" });
            }

            // expiryMonth (string) maxLength
            if (this.expiryMonth != null && this.expiryMonth.Length > 2)
            {
                yield return new ValidationResult("Invalid value for expiryMonth, length must be less than 2.", new [] { "expiryMonth" });
            }

            // expiryMonth (string) minLength
            if (this.expiryMonth != null && this.expiryMonth.Length < 2)
            {
                yield return new ValidationResult("Invalid value for expiryMonth, length must be greater than 2.", new [] { "expiryMonth" });
            }

            // expiryYear (string) maxLength
            if (this.expiryYear != null && this.expiryYear.Length > 2)
            {
                yield return new ValidationResult("Invalid value for expiryYear, length must be less than 2.", new [] { "expiryYear" });
            }

            // expiryYear (string) minLength
            if (this.expiryYear != null && this.expiryYear.Length < 2)
            {
                yield return new ValidationResult("Invalid value for expiryYear, length must be greater than 2.", new [] { "expiryYear" });
            }

            // sequenceNumber (string) maxLength
            if (this.sequenceNumber != null && this.sequenceNumber.Length > 2)
            {
                yield return new ValidationResult("Invalid value for sequenceNumber, length must be less than 2.", new [] { "sequenceNumber" });
            }

            // sequenceNumber (string) minLength
            if (this.sequenceNumber != null && this.sequenceNumber.Length < 2)
            {
                yield return new ValidationResult("Invalid value for sequenceNumber, length must be greater than 2.", new [] { "sequenceNumber" });
            }

            yield break;
        }
    }

}
