/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ValidateActivationCodeResponseSchema
    /// </summary>
    [DataContract(Name = "ValidateActivationCodeResponseSchema")]
    public partial class ValidateActivationCodeResponseSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeResponseSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidateActivationCodeResponseSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeResponseSchema" /> class.
        /// </summary>
        /// <param name="responseId">The Id of the response returned. (required).</param>
        /// <param name="result">Whether the activation request was successful. Success will result in MDES attempting to complete the provisioning process. MDES will notify the Token Requestor when the Token is ready to transact. Must be one of; SUCCESS &#x3D; Activation was successful, INCORRECT_CODE &#x3D; Activation Code was incorrect and rejected. Retries permitted,  INCORRECT_CODE_RETRIES_EXCEEDED &#x3D;  Activation Code was incorrect and the maximum number of retries now exceeded, EXPIRED_CODE &#x3D; Activation Code has expired or was invalidated. Max length - 32. Type - String. Required..</param>
        public ValidateActivationCodeResponseSchema(string responseId = default(string), string result = default(string))
        {
            // to ensure "responseId" is required (not null)
            if (responseId == null)
            {
                throw new ArgumentNullException("responseId is a required property for ValidateActivationCodeResponseSchema and cannot be null");
            }
            this.responseId = responseId;
            this.result = result;
        }

        /// <summary>
        /// The Id of the response returned.
        /// </summary>
        /// <value>The Id of the response returned.</value>
        /// <example>123456</example>
        [DataMember(Name = "responseId", IsRequired = true, EmitDefaultValue = true)]
        public string responseId { get; set; }

        /// <summary>
        /// Whether the activation request was successful. Success will result in MDES attempting to complete the provisioning process. MDES will notify the Token Requestor when the Token is ready to transact. Must be one of; SUCCESS &#x3D; Activation was successful, INCORRECT_CODE &#x3D; Activation Code was incorrect and rejected. Retries permitted,  INCORRECT_CODE_RETRIES_EXCEEDED &#x3D;  Activation Code was incorrect and the maximum number of retries now exceeded, EXPIRED_CODE &#x3D; Activation Code has expired or was invalidated. Max length - 32. Type - String. Required.
        /// </summary>
        /// <value>Whether the activation request was successful. Success will result in MDES attempting to complete the provisioning process. MDES will notify the Token Requestor when the Token is ready to transact. Must be one of; SUCCESS &#x3D; Activation was successful, INCORRECT_CODE &#x3D; Activation Code was incorrect and rejected. Retries permitted,  INCORRECT_CODE_RETRIES_EXCEEDED &#x3D;  Activation Code was incorrect and the maximum number of retries now exceeded, EXPIRED_CODE &#x3D; Activation Code has expired or was invalidated. Max length - 32. Type - String. Required.</value>
        /// <example>SUCCESS</example>
        [DataMember(Name = "result", EmitDefaultValue = false)]
        public string result { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidateActivationCodeResponseSchema {\n");
            sb.Append("  responseId: ").Append(responseId).Append("\n");
            sb.Append("  result: ").Append(result).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // responseId (string) maxLength
            if (this.responseId != null && this.responseId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for responseId, length must be less than 64.", new [] { "responseId" });
            }

            // responseId (string) minLength
            if (this.responseId != null && this.responseId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for responseId, length must be greater than 1.", new [] { "responseId" });
            }

            // result (string) maxLength
            if (this.result != null && this.result.Length > 32)
            {
                yield return new ValidationResult("Invalid value for result, length must be less than 32.", new [] { "result" });
            }

            // result (string) minLength
            if (this.result != null && this.result.Length < 1)
            {
                yield return new ValidationResult("Invalid value for result, length must be greater than 1.", new [] { "result" });
            }

            yield break;
        }
    }

}
