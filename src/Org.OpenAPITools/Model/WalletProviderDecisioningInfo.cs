/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains information about the decision recommended by the Wallet Provider. Max length - Not applicable. Type - Map (DecisioningInfo).
    /// </summary>
    [DataContract(Name = "walletProviderDecisioningInfo")]
    public partial class WalletProviderDecisioningInfo : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="WalletProviderDecisioningInfo" /> class.
        /// </summary>
        /// <param name="recommendedDecision">The decision recommended by the Wallet Provider. Must be one of; APPROVED &#x3D; Services request was approved, DECLINED &#x3D; Services request was declined, REQUIRE_ADDITIONAL_AUTHENTICATION &#x3D; Services request requires additional authentication to be approved..</param>
        /// <param name="recommendationStandardVersion">The standards version used by the Wallet Provider to determine the recommended decision..</param>
        /// <param name="deviceScore">Score given to the device by the Wallet Provider. Value between 1 and 5..</param>
        /// <param name="accountScore">Score given to the account by the Wallet Provider. Value between 1 and 5..</param>
        /// <param name="phoneNumberScore">Score given to the phone number by the Wallet Provider. Value between 1 and 5..</param>
        /// <param name="accountLifeTime">The lifetime of the account with the Token Requestor..</param>
        /// <param name="recommendationReasons">Reasons provided to the Wallet Provider on how the recommended decision was reached.  Please refer to \&quot;Reason Codes\&quot; tab for all eligible values. Max length - Not applicable. Type - Array [String]..</param>
        public WalletProviderDecisioningInfo(string recommendedDecision = default(string), string recommendationStandardVersion = default(string), string deviceScore = default(string), string accountScore = default(string), string phoneNumberScore = default(string), string accountLifeTime = default(string), List<string> recommendationReasons = default(List<string>))
        {
            this.recommendedDecision = recommendedDecision;
            this.recommendationStandardVersion = recommendationStandardVersion;
            this.deviceScore = deviceScore;
            this.accountScore = accountScore;
            this.phoneNumberScore = phoneNumberScore;
            this.accountLifeTime = accountLifeTime;
            this.recommendationReasons = recommendationReasons;
        }

        /// <summary>
        /// The decision recommended by the Wallet Provider. Must be one of; APPROVED &#x3D; Services request was approved, DECLINED &#x3D; Services request was declined, REQUIRE_ADDITIONAL_AUTHENTICATION &#x3D; Services request requires additional authentication to be approved.
        /// </summary>
        /// <value>The decision recommended by the Wallet Provider. Must be one of; APPROVED &#x3D; Services request was approved, DECLINED &#x3D; Services request was declined, REQUIRE_ADDITIONAL_AUTHENTICATION &#x3D; Services request requires additional authentication to be approved.</value>
        /// <example>REQUIRE_ADDITIONAL_AUTHENTICATION</example>
        [DataMember(Name = "recommendedDecision", EmitDefaultValue = false)]
        public string recommendedDecision { get; set; }

        /// <summary>
        /// The standards version used by the Wallet Provider to determine the recommended decision.
        /// </summary>
        /// <value>The standards version used by the Wallet Provider to determine the recommended decision.</value>
        /// <example>1.0.0</example>
        [DataMember(Name = "recommendationStandardVersion", EmitDefaultValue = false)]
        public string recommendationStandardVersion { get; set; }

        /// <summary>
        /// Score given to the device by the Wallet Provider. Value between 1 and 5.
        /// </summary>
        /// <value>Score given to the device by the Wallet Provider. Value between 1 and 5.</value>
        /// <example>3</example>
        [DataMember(Name = "deviceScore", EmitDefaultValue = false)]
        public string deviceScore { get; set; }

        /// <summary>
        /// Score given to the account by the Wallet Provider. Value between 1 and 5.
        /// </summary>
        /// <value>Score given to the account by the Wallet Provider. Value between 1 and 5.</value>
        /// <example>4</example>
        [DataMember(Name = "accountScore", EmitDefaultValue = false)]
        public string accountScore { get; set; }

        /// <summary>
        /// Score given to the phone number by the Wallet Provider. Value between 1 and 5.
        /// </summary>
        /// <value>Score given to the phone number by the Wallet Provider. Value between 1 and 5.</value>
        /// <example>4</example>
        [DataMember(Name = "phoneNumberScore", EmitDefaultValue = false)]
        public string phoneNumberScore { get; set; }

        /// <summary>
        /// The lifetime of the account with the Token Requestor.
        /// </summary>
        /// <value>The lifetime of the account with the Token Requestor.</value>
        /// <example>4</example>
        [DataMember(Name = "accountLifeTime", EmitDefaultValue = false)]
        public string accountLifeTime { get; set; }

        /// <summary>
        /// Reasons provided to the Wallet Provider on how the recommended decision was reached.  Please refer to \&quot;Reason Codes\&quot; tab for all eligible values. Max length - Not applicable. Type - Array [String].
        /// </summary>
        /// <value>Reasons provided to the Wallet Provider on how the recommended decision was reached.  Please refer to \&quot;Reason Codes\&quot; tab for all eligible values. Max length - Not applicable. Type - Array [String].</value>
        [DataMember(Name = "recommendationReasons", EmitDefaultValue = false)]
        public List<string> recommendationReasons { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class WalletProviderDecisioningInfo {\n");
            sb.Append("  recommendedDecision: ").Append(recommendedDecision).Append("\n");
            sb.Append("  recommendationStandardVersion: ").Append(recommendationStandardVersion).Append("\n");
            sb.Append("  deviceScore: ").Append(deviceScore).Append("\n");
            sb.Append("  accountScore: ").Append(accountScore).Append("\n");
            sb.Append("  phoneNumberScore: ").Append(phoneNumberScore).Append("\n");
            sb.Append("  accountLifeTime: ").Append(accountLifeTime).Append("\n");
            sb.Append("  recommendationReasons: ").Append(recommendationReasons).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // recommendedDecision (string) maxLength
            if (this.recommendedDecision != null && this.recommendedDecision.Length > 64)
            {
                yield return new ValidationResult("Invalid value for recommendedDecision, length must be less than 64.", new [] { "recommendedDecision" });
            }

            // recommendedDecision (string) minLength
            if (this.recommendedDecision != null && this.recommendedDecision.Length < 1)
            {
                yield return new ValidationResult("Invalid value for recommendedDecision, length must be greater than 1.", new [] { "recommendedDecision" });
            }

            // recommendationStandardVersion (string) maxLength
            if (this.recommendationStandardVersion != null && this.recommendationStandardVersion.Length > 64)
            {
                yield return new ValidationResult("Invalid value for recommendationStandardVersion, length must be less than 64.", new [] { "recommendationStandardVersion" });
            }

            // recommendationStandardVersion (string) minLength
            if (this.recommendationStandardVersion != null && this.recommendationStandardVersion.Length < 1)
            {
                yield return new ValidationResult("Invalid value for recommendationStandardVersion, length must be greater than 1.", new [] { "recommendationStandardVersion" });
            }

            // deviceScore (string) maxLength
            if (this.deviceScore != null && this.deviceScore.Length > 64)
            {
                yield return new ValidationResult("Invalid value for deviceScore, length must be less than 64.", new [] { "deviceScore" });
            }

            // deviceScore (string) minLength
            if (this.deviceScore != null && this.deviceScore.Length < 1)
            {
                yield return new ValidationResult("Invalid value for deviceScore, length must be greater than 1.", new [] { "deviceScore" });
            }

            // accountScore (string) maxLength
            if (this.accountScore != null && this.accountScore.Length > 64)
            {
                yield return new ValidationResult("Invalid value for accountScore, length must be less than 64.", new [] { "accountScore" });
            }

            // accountScore (string) minLength
            if (this.accountScore != null && this.accountScore.Length < 1)
            {
                yield return new ValidationResult("Invalid value for accountScore, length must be greater than 1.", new [] { "accountScore" });
            }

            // phoneNumberScore (string) maxLength
            if (this.phoneNumberScore != null && this.phoneNumberScore.Length > 64)
            {
                yield return new ValidationResult("Invalid value for phoneNumberScore, length must be less than 64.", new [] { "phoneNumberScore" });
            }

            // phoneNumberScore (string) minLength
            if (this.phoneNumberScore != null && this.phoneNumberScore.Length < 1)
            {
                yield return new ValidationResult("Invalid value for phoneNumberScore, length must be greater than 1.", new [] { "phoneNumberScore" });
            }

            // accountLifeTime (string) maxLength
            if (this.accountLifeTime != null && this.accountLifeTime.Length > 2)
            {
                yield return new ValidationResult("Invalid value for accountLifeTime, length must be less than 2.", new [] { "accountLifeTime" });
            }

            // accountLifeTime (string) minLength
            if (this.accountLifeTime != null && this.accountLifeTime.Length < 1)
            {
                yield return new ValidationResult("Invalid value for accountLifeTime, length must be greater than 1.", new [] { "accountLifeTime" });
            }

            yield break;
        }
    }

}
