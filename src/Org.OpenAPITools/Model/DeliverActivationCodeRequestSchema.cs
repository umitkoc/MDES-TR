/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holder’s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// DeliverActivationCodeRequestSchema
    /// </summary>
    [DataContract(Name = "DeliverActivationCodeRequestSchema")]
    public partial class DeliverActivationCodeRequestSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliverActivationCodeRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected DeliverActivationCodeRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="DeliverActivationCodeRequestSchema" /> class.
        /// </summary>
        /// <param name="requestId">The id of the request submitted. Max length - 64 (required).</param>
        /// <param name="tokenUniqueReference">A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. (required).</param>
        /// <param name="correlationId">Value linking pre-digitization messages generated during provisioning. (required).</param>
        /// <param name="activationCode">The Activation Code to be distributed for the digitization. Conditional - only present if Mastercard generates the activationCode..</param>
        /// <param name="expirationDateTime">The DateTime when the Activation Code is no longer valid. Expressed in ISO 8601 extended format as one of the following - YYYY-MM-DDThh:mm:ss[ .sss ]Z , YYYY-MM-DDThh:mm:ss[ .sss ]±hh:mm , Where [ .sss ] is optional and can be 1 to 3 digits. Conditional - only present if Mastercard generates the activationCode..</param>
        /// <param name="activationMethod">activationMethod (required).</param>
        /// <param name="reasonCodes">The reason the account holder is being authenticated.  The reason could impact the generation and validation of the code in a number of ways including but not limited to the time period of validity of the code and the number of attempts allowed to validate the code. New reason codes can be added at any time and should not result in a failure. Possible push methods are:   * ADD_CARD:  The account holder is being authenticated after adding the card to the token requestor   * VERIFY_ACCOUNT:  The account holder is being authenticated in order to verify account ownership.   * OTHER:  The account holder is being authenticated for a reason not enumerated in this list. Conditional - Only present for Conset Service .</param>
        /// <param name="consumerFacingEntityName">Entity name that account holder recognizes as being where they store their PAN (wallets, merchants, commerce platforms…)..</param>
        public DeliverActivationCodeRequestSchema(string requestId = default(string), string tokenUniqueReference = default(string), string correlationId = default(string), string activationCode = default(string), string expirationDateTime = default(string), ActivationMethod activationMethod = default(ActivationMethod), List<string> reasonCodes = default(List<string>), string consumerFacingEntityName = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for DeliverActivationCodeRequestSchema and cannot be null");
            }
            this.requestId = requestId;
            // to ensure "tokenUniqueReference" is required (not null)
            if (tokenUniqueReference == null)
            {
                throw new ArgumentNullException("tokenUniqueReference is a required property for DeliverActivationCodeRequestSchema and cannot be null");
            }
            this.tokenUniqueReference = tokenUniqueReference;
            // to ensure "correlationId" is required (not null)
            if (correlationId == null)
            {
                throw new ArgumentNullException("correlationId is a required property for DeliverActivationCodeRequestSchema and cannot be null");
            }
            this.correlationId = correlationId;
            // to ensure "activationMethod" is required (not null)
            if (activationMethod == null)
            {
                throw new ArgumentNullException("activationMethod is a required property for DeliverActivationCodeRequestSchema and cannot be null");
            }
            this.activationMethod = activationMethod;
            this.activationCode = activationCode;
            this.expirationDateTime = expirationDateTime;
            this.reasonCodes = reasonCodes;
            this.consumerFacingEntityName = consumerFacingEntityName;
        }

        /// <summary>
        /// The id of the request submitted. Max length - 64
        /// </summary>
        /// <value>The id of the request submitted. Max length - 64</value>
        /// <example>123456</example>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string requestId { get; set; }

        /// <summary>
        /// A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
        /// </summary>
        /// <value>A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.</value>
        /// <example>DWSPMC000000000132d72d4fcb2f4136a0532d3093ff1a45</example>
        [DataMember(Name = "tokenUniqueReference", IsRequired = true, EmitDefaultValue = true)]
        public string tokenUniqueReference { get; set; }

        /// <summary>
        /// Value linking pre-digitization messages generated during provisioning.
        /// </summary>
        /// <value>Value linking pre-digitization messages generated during provisioning.</value>
        /// <example>D98765432104</example>
        [DataMember(Name = "correlationId", IsRequired = true, EmitDefaultValue = true)]
        public string correlationId { get; set; }

        /// <summary>
        /// The Activation Code to be distributed for the digitization. Conditional - only present if Mastercard generates the activationCode.
        /// </summary>
        /// <value>The Activation Code to be distributed for the digitization. Conditional - only present if Mastercard generates the activationCode.</value>
        /// <example>A1B2C3D4</example>
        [DataMember(Name = "activationCode", EmitDefaultValue = false)]
        public string activationCode { get; set; }

        /// <summary>
        /// The DateTime when the Activation Code is no longer valid. Expressed in ISO 8601 extended format as one of the following - YYYY-MM-DDThh:mm:ss[ .sss ]Z , YYYY-MM-DDThh:mm:ss[ .sss ]±hh:mm , Where [ .sss ] is optional and can be 1 to 3 digits. Conditional - only present if Mastercard generates the activationCode.
        /// </summary>
        /// <value>The DateTime when the Activation Code is no longer valid. Expressed in ISO 8601 extended format as one of the following - YYYY-MM-DDThh:mm:ss[ .sss ]Z , YYYY-MM-DDThh:mm:ss[ .sss ]±hh:mm , Where [ .sss ] is optional and can be 1 to 3 digits. Conditional - only present if Mastercard generates the activationCode.</value>
        /// <example>2026-07-04T12:08:56.123-07:00</example>
        [DataMember(Name = "expirationDateTime", EmitDefaultValue = false)]
        public string expirationDateTime { get; set; }

        /// <summary>
        /// Gets or Sets activationMethod
        /// </summary>
        [DataMember(Name = "activationMethod", IsRequired = true, EmitDefaultValue = true)]
        public ActivationMethod activationMethod { get; set; }

        /// <summary>
        /// The reason the account holder is being authenticated.  The reason could impact the generation and validation of the code in a number of ways including but not limited to the time period of validity of the code and the number of attempts allowed to validate the code. New reason codes can be added at any time and should not result in a failure. Possible push methods are:   * ADD_CARD:  The account holder is being authenticated after adding the card to the token requestor   * VERIFY_ACCOUNT:  The account holder is being authenticated in order to verify account ownership.   * OTHER:  The account holder is being authenticated for a reason not enumerated in this list. Conditional - Only present for Conset Service 
        /// </summary>
        /// <value>The reason the account holder is being authenticated.  The reason could impact the generation and validation of the code in a number of ways including but not limited to the time period of validity of the code and the number of attempts allowed to validate the code. New reason codes can be added at any time and should not result in a failure. Possible push methods are:   * ADD_CARD:  The account holder is being authenticated after adding the card to the token requestor   * VERIFY_ACCOUNT:  The account holder is being authenticated in order to verify account ownership.   * OTHER:  The account holder is being authenticated for a reason not enumerated in this list. Conditional - Only present for Conset Service </value>
        [DataMember(Name = "reasonCodes", EmitDefaultValue = false)]
        public List<string> reasonCodes { get; set; }

        /// <summary>
        /// Entity name that account holder recognizes as being where they store their PAN (wallets, merchants, commerce platforms…).
        /// </summary>
        /// <value>Entity name that account holder recognizes as being where they store their PAN (wallets, merchants, commerce platforms…).</value>
        /// <example>My Merchant</example>
        [DataMember(Name = "consumerFacingEntityName", EmitDefaultValue = false)]
        public string consumerFacingEntityName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DeliverActivationCodeRequestSchema {\n");
            sb.Append("  requestId: ").Append(requestId).Append("\n");
            sb.Append("  tokenUniqueReference: ").Append(tokenUniqueReference).Append("\n");
            sb.Append("  correlationId: ").Append(correlationId).Append("\n");
            sb.Append("  activationCode: ").Append(activationCode).Append("\n");
            sb.Append("  expirationDateTime: ").Append(expirationDateTime).Append("\n");
            sb.Append("  activationMethod: ").Append(activationMethod).Append("\n");
            sb.Append("  reasonCodes: ").Append(reasonCodes).Append("\n");
            sb.Append("  consumerFacingEntityName: ").Append(consumerFacingEntityName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // requestId (string) maxLength
            if (this.requestId != null && this.requestId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for requestId, length must be less than 64.", new [] { "requestId" });
            }

            // requestId (string) minLength
            if (this.requestId != null && this.requestId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for requestId, length must be greater than 1.", new [] { "requestId" });
            }

            // tokenUniqueReference (string) maxLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length > 64)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be less than 64.", new [] { "tokenUniqueReference" });
            }

            // tokenUniqueReference (string) minLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length < 1)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be greater than 1.", new [] { "tokenUniqueReference" });
            }

            // correlationId (string) maxLength
            if (this.correlationId != null && this.correlationId.Length > 14)
            {
                yield return new ValidationResult("Invalid value for correlationId, length must be less than 14.", new [] { "correlationId" });
            }

            // correlationId (string) minLength
            if (this.correlationId != null && this.correlationId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for correlationId, length must be greater than 1.", new [] { "correlationId" });
            }

            // activationCode (string) maxLength
            if (this.activationCode != null && this.activationCode.Length > 32)
            {
                yield return new ValidationResult("Invalid value for activationCode, length must be less than 32.", new [] { "activationCode" });
            }

            // activationCode (string) minLength
            if (this.activationCode != null && this.activationCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for activationCode, length must be greater than 1.", new [] { "activationCode" });
            }

            // expirationDateTime (string) maxLength
            if (this.expirationDateTime != null && this.expirationDateTime.Length > 29)
            {
                yield return new ValidationResult("Invalid value for expirationDateTime, length must be less than 29.", new [] { "expirationDateTime" });
            }

            // expirationDateTime (string) minLength
            if (this.expirationDateTime != null && this.expirationDateTime.Length < 20)
            {
                yield return new ValidationResult("Invalid value for expirationDateTime, length must be greater than 20.", new [] { "expirationDateTime" });
            }

            // consumerFacingEntityName (string) maxLength
            if (this.consumerFacingEntityName != null && this.consumerFacingEntityName.Length > 100)
            {
                yield return new ValidationResult("Invalid value for consumerFacingEntityName, length must be less than 100.", new [] { "consumerFacingEntityName" });
            }

            // consumerFacingEntityName (string) minLength
            if (this.consumerFacingEntityName != null && this.consumerFacingEntityName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for consumerFacingEntityName, length must be greater than 1.", new [] { "consumerFacingEntityName" });
            }

            yield break;
        }
    }

}
