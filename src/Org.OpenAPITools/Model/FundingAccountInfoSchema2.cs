/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains the information of the funding account to be tokenized. This could be a credit card, debit card, bank account, or other type of financial account. The token information will also be included. Max length - Not applicable. Type - FundingAccountInfo object.
    /// </summary>
    [DataContract(Name = "fundingAccountInfoSchema2")]
    public partial class FundingAccountInfoSchema2 : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingAccountInfoSchema2" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundingAccountInfoSchema2() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingAccountInfoSchema2" /> class.
        /// </summary>
        /// <param name="panUniqueReference">Reference to the PAN that is unique per Wallet Provider..</param>
        /// <param name="tokenUniqueReference">A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. Conditional - Required in NotifyServiceActivated. Not present otherwise..</param>
        /// <param name="encryptedPayload">encryptedPayload (required).</param>
        public FundingAccountInfoSchema2(string panUniqueReference = default(string), string tokenUniqueReference = default(string), EncryptedPayloadIn encryptedPayload = default(EncryptedPayloadIn))
        {
            // to ensure "encryptedPayload" is required (not null)
            if (encryptedPayload == null)
            {
                throw new ArgumentNullException("encryptedPayload is a required property for FundingAccountInfoSchema2 and cannot be null");
            }
            this.encryptedPayload = encryptedPayload;
            this.panUniqueReference = panUniqueReference;
            this.tokenUniqueReference = tokenUniqueReference;
        }

        /// <summary>
        /// Reference to the PAN that is unique per Wallet Provider.
        /// </summary>
        /// <value>Reference to the PAN that is unique per Wallet Provider.</value>
        /// <example>FWSPMC000000000159f71f703d2141efaf04dd26803f922b</example>
        [DataMember(Name = "panUniqueReference", EmitDefaultValue = false)]
        public string panUniqueReference { get; set; }

        /// <summary>
        /// A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. Conditional - Required in NotifyServiceActivated. Not present otherwise.
        /// </summary>
        /// <value>A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. Conditional - Required in NotifyServiceActivated. Not present otherwise.</value>
        /// <example>DWSPMC000000000132d72d4fcb2f4136a0532d3093ff1a45</example>
        [DataMember(Name = "tokenUniqueReference", EmitDefaultValue = false)]
        public string tokenUniqueReference { get; set; }

        /// <summary>
        /// Gets or Sets encryptedPayload
        /// </summary>
        [DataMember(Name = "encryptedPayload", IsRequired = true, EmitDefaultValue = true)]
        public EncryptedPayloadIn encryptedPayload { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundingAccountInfoSchema2 {\n");
            sb.Append("  panUniqueReference: ").Append(panUniqueReference).Append("\n");
            sb.Append("  tokenUniqueReference: ").Append(tokenUniqueReference).Append("\n");
            sb.Append("  encryptedPayload: ").Append(encryptedPayload).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // panUniqueReference (string) maxLength
            if (this.panUniqueReference != null && this.panUniqueReference.Length > 64)
            {
                yield return new ValidationResult("Invalid value for panUniqueReference, length must be less than 64.", new [] { "panUniqueReference" });
            }

            // panUniqueReference (string) minLength
            if (this.panUniqueReference != null && this.panUniqueReference.Length < 1)
            {
                yield return new ValidationResult("Invalid value for panUniqueReference, length must be greater than 1.", new [] { "panUniqueReference" });
            }

            // tokenUniqueReference (string) maxLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length > 64)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be less than 64.", new [] { "tokenUniqueReference" });
            }

            // tokenUniqueReference (string) minLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length < 1)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be greater than 1.", new [] { "tokenUniqueReference" });
            }

            yield break;
        }
    }

}
