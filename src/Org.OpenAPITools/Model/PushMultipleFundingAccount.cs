/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. All request and response parameters are case sensitive. 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PushMultipleFundingAccount
    /// </summary>
    [DataContract(Name = "PushMultipleFundingAccount")]
    public partial class PushMultipleFundingAccount : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushMultipleFundingAccount" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PushMultipleFundingAccount() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushMultipleFundingAccount" /> class.
        /// </summary>
        /// <param name="pushAccountId">The identifier for the account that is being pushed.  Should be unique within a PushMultipleAccounts request. __Max Length:__ 36 characters  (required).</param>
        /// <param name="fundingAccountData">fundingAccountData (required).</param>
        public PushMultipleFundingAccount(string pushAccountId = default(string), FundingAccount fundingAccountData = default(FundingAccount))
        {
            // to ensure "pushAccountId" is required (not null)
            if (pushAccountId == null)
            {
                throw new ArgumentNullException("pushAccountId is a required property for PushMultipleFundingAccount and cannot be null");
            }
            this.pushAccountId = pushAccountId;
            // to ensure "fundingAccountData" is required (not null)
            if (fundingAccountData == null)
            {
                throw new ArgumentNullException("fundingAccountData is a required property for PushMultipleFundingAccount and cannot be null");
            }
            this.fundingAccountData = fundingAccountData;
        }

        /// <summary>
        /// The identifier for the account that is being pushed.  Should be unique within a PushMultipleAccounts request. __Max Length:__ 36 characters 
        /// </summary>
        /// <value>The identifier for the account that is being pushed.  Should be unique within a PushMultipleAccounts request. __Max Length:__ 36 characters </value>
        /// <example>CA-132d72d4fcb2f4136a0532d3093ff1ab</example>
        [DataMember(Name = "pushAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string pushAccountId { get; set; }

        /// <summary>
        /// Gets or Sets fundingAccountData
        /// </summary>
        [DataMember(Name = "fundingAccountData", IsRequired = true, EmitDefaultValue = true)]
        public FundingAccount fundingAccountData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PushMultipleFundingAccount {\n");
            sb.Append("  pushAccountId: ").Append(pushAccountId).Append("\n");
            sb.Append("  fundingAccountData: ").Append(fundingAccountData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
