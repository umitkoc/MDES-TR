/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. All request and response parameters are case sensitive. 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PushMultipleAccountsData
    /// </summary>
    [DataContract(Name = "PushMultipleAccountsData")]
    public partial class PushMultipleAccountsData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PushMultipleAccountsData" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PushMultipleAccountsData() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PushMultipleAccountsData" /> class.
        /// </summary>
        /// <param name="pushAccountId">The identifier for the account that is being pushed.  Should be unique within a PushMultipleAccounts request.  __Max Length:__ 36   (required).</param>
        /// <param name="pushAccountReceipt">Receipt value to be passed to the Token Requestor. The pushAccountReceipt represents the pushed account details and expires after 15 minutes. __Conditional.__ Required unless error is returned. __Max Length:__ 64 characters. When valid, the receipt will consist of a 3-character prefix identifying the product associated to the funding account concatenated with a universally unique identifier, in the form prefix-UUID. The prefix is needed by some Token Requestors in preparation of performing a tokenization. Prefix values are:  * MCC: Mastercard Credit  * DMC: Mastercard Debit  * MSI: Maestro  * PVL: Private Label .</param>
        /// <param name="issuerInitiatedDigitizationData">Base64Encoded String of fundingAccountInfo object that issuer can pass to Token Requestor propritary communication. __Conditional.__ Present if requestIssuerInitiatedDigitizationData value is true in the request. _Max_Length: 256K .</param>
        /// <param name="errors">Element encapsulating a collection of errors that occurred during a single request. __Conditional.__ Required if one or more errors occurred while performing the operation. Not present if the operation was successful. .</param>
        public PushMultipleAccountsData(string pushAccountId = default(string), string pushAccountReceipt = default(string), string issuerInitiatedDigitizationData = default(string), List<Error> errors = default(List<Error>))
        {
            // to ensure "pushAccountId" is required (not null)
            if (pushAccountId == null)
            {
                throw new ArgumentNullException("pushAccountId is a required property for PushMultipleAccountsData and cannot be null");
            }
            this.pushAccountId = pushAccountId;
            this.pushAccountReceipt = pushAccountReceipt;
            this.issuerInitiatedDigitizationData = issuerInitiatedDigitizationData;
            this.errors = errors;
        }

        /// <summary>
        /// The identifier for the account that is being pushed.  Should be unique within a PushMultipleAccounts request.  __Max Length:__ 36  
        /// </summary>
        /// <value>The identifier for the account that is being pushed.  Should be unique within a PushMultipleAccounts request.  __Max Length:__ 36  </value>
        /// <example>CA-132d72d4fcb2f4136a0532d3093ff1ab</example>
        [DataMember(Name = "pushAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string pushAccountId { get; set; }

        /// <summary>
        /// Receipt value to be passed to the Token Requestor. The pushAccountReceipt represents the pushed account details and expires after 15 minutes. __Conditional.__ Required unless error is returned. __Max Length:__ 64 characters. When valid, the receipt will consist of a 3-character prefix identifying the product associated to the funding account concatenated with a universally unique identifier, in the form prefix-UUID. The prefix is needed by some Token Requestors in preparation of performing a tokenization. Prefix values are:  * MCC: Mastercard Credit  * DMC: Mastercard Debit  * MSI: Maestro  * PVL: Private Label 
        /// </summary>
        /// <value>Receipt value to be passed to the Token Requestor. The pushAccountReceipt represents the pushed account details and expires after 15 minutes. __Conditional.__ Required unless error is returned. __Max Length:__ 64 characters. When valid, the receipt will consist of a 3-character prefix identifying the product associated to the funding account concatenated with a universally unique identifier, in the form prefix-UUID. The prefix is needed by some Token Requestors in preparation of performing a tokenization. Prefix values are:  * MCC: Mastercard Credit  * DMC: Mastercard Debit  * MSI: Maestro  * PVL: Private Label </value>
        /// <example>MCC-C307F0AE-298E-48EB-AA43-A7C40B32DDDE</example>
        [DataMember(Name = "pushAccountReceipt", EmitDefaultValue = false)]
        public string pushAccountReceipt { get; set; }

        /// <summary>
        /// Base64Encoded String of fundingAccountInfo object that issuer can pass to Token Requestor propritary communication. __Conditional.__ Present if requestIssuerInitiatedDigitizationData value is true in the request. _Max_Length: 256K 
        /// </summary>
        /// <value>Base64Encoded String of fundingAccountInfo object that issuer can pass to Token Requestor propritary communication. __Conditional.__ Present if requestIssuerInitiatedDigitizationData value is true in the request. _Max_Length: 256K </value>
        /// <example>eyJmdW5kaW5nQWNjb3VudEluZm8iOnsicHVzaEFjY291bnRSZWNlaXB0IjoiTUNDLVNUTC00OTZCNjNBOC02OTQzLTRFM0YtOEYzNi1DMjU0M0Q4OTg1ODQifX0&#x3D;</example>
        [DataMember(Name = "issuerInitiatedDigitizationData", EmitDefaultValue = false)]
        public string issuerInitiatedDigitizationData { get; set; }

        /// <summary>
        /// Element encapsulating a collection of errors that occurred during a single request. __Conditional.__ Required if one or more errors occurred while performing the operation. Not present if the operation was successful. 
        /// </summary>
        /// <value>Element encapsulating a collection of errors that occurred during a single request. __Conditional.__ Required if one or more errors occurred while performing the operation. Not present if the operation was successful. </value>
        [DataMember(Name = "errors", EmitDefaultValue = false)]
        public List<Error> errors { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PushMultipleAccountsData {\n");
            sb.Append("  pushAccountId: ").Append(pushAccountId).Append("\n");
            sb.Append("  pushAccountReceipt: ").Append(pushAccountReceipt).Append("\n");
            sb.Append("  issuerInitiatedDigitizationData: ").Append(issuerInitiatedDigitizationData).Append("\n");
            sb.Append("  errors: ").Append(errors).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
