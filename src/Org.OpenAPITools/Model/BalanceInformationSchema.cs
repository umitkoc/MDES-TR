/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holder’s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// BalanceInformationSchema
    /// </summary>
    [DataContract(Name = "balanceInformationSchema")]
    public partial class BalanceInformationSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceInformationSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected BalanceInformationSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="BalanceInformationSchema" /> class.
        /// </summary>
        /// <param name="amount">The amount of the balance. Numeric including the decimal positions. (required).</param>
        /// <param name="currencyCode">The currency code defined using ISO 4217. (required).</param>
        /// <param name="balanceDateTime">The DateTime when the balance was checked. Expressed in ISO 8601 extended format as one of the following YYYY-MM-DDThh:mm:ss[.sss]Z | YYYY-MM-DDThh:mm:ss[.sss]±hh:mm, Where [.sss] is optional and can be 1 to 3 digits. Type - TokenData. (required).</param>
        public BalanceInformationSchema(string amount = default(string), string currencyCode = default(string), string balanceDateTime = default(string))
        {
            // to ensure "amount" is required (not null)
            if (amount == null)
            {
                throw new ArgumentNullException("amount is a required property for BalanceInformationSchema and cannot be null");
            }
            this.amount = amount;
            // to ensure "currencyCode" is required (not null)
            if (currencyCode == null)
            {
                throw new ArgumentNullException("currencyCode is a required property for BalanceInformationSchema and cannot be null");
            }
            this.currencyCode = currencyCode;
            // to ensure "balanceDateTime" is required (not null)
            if (balanceDateTime == null)
            {
                throw new ArgumentNullException("balanceDateTime is a required property for BalanceInformationSchema and cannot be null");
            }
            this.balanceDateTime = balanceDateTime;
        }

        /// <summary>
        /// The amount of the balance. Numeric including the decimal positions.
        /// </summary>
        /// <value>The amount of the balance. Numeric including the decimal positions.</value>
        /// <example>25.36</example>
        [DataMember(Name = "amount", IsRequired = true, EmitDefaultValue = true)]
        public string amount { get; set; }

        /// <summary>
        /// The currency code defined using ISO 4217.
        /// </summary>
        /// <value>The currency code defined using ISO 4217.</value>
        /// <example>USD</example>
        [DataMember(Name = "currencyCode", IsRequired = true, EmitDefaultValue = true)]
        public string currencyCode { get; set; }

        /// <summary>
        /// The DateTime when the balance was checked. Expressed in ISO 8601 extended format as one of the following YYYY-MM-DDThh:mm:ss[.sss]Z | YYYY-MM-DDThh:mm:ss[.sss]±hh:mm, Where [.sss] is optional and can be 1 to 3 digits. Type - TokenData.
        /// </summary>
        /// <value>The DateTime when the balance was checked. Expressed in ISO 8601 extended format as one of the following YYYY-MM-DDThh:mm:ss[.sss]Z | YYYY-MM-DDThh:mm:ss[.sss]±hh:mm, Where [.sss] is optional and can be 1 to 3 digits. Type - TokenData.</value>
        /// <example>2023-07-04T12:08:56.123-07:00</example>
        [DataMember(Name = "balanceDateTime", IsRequired = true, EmitDefaultValue = true)]
        public string balanceDateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class BalanceInformationSchema {\n");
            sb.Append("  amount: ").Append(amount).Append("\n");
            sb.Append("  currencyCode: ").Append(currencyCode).Append("\n");
            sb.Append("  balanceDateTime: ").Append(balanceDateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // amount (string) maxLength
            if (this.amount != null && this.amount.Length > 16)
            {
                yield return new ValidationResult("Invalid value for amount, length must be less than 16.", new [] { "amount" });
            }

            // amount (string) minLength
            if (this.amount != null && this.amount.Length < 1)
            {
                yield return new ValidationResult("Invalid value for amount, length must be greater than 1.", new [] { "amount" });
            }

            // currencyCode (string) maxLength
            if (this.currencyCode != null && this.currencyCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for currencyCode, length must be less than 3.", new [] { "currencyCode" });
            }

            // currencyCode (string) minLength
            if (this.currencyCode != null && this.currencyCode.Length < 3)
            {
                yield return new ValidationResult("Invalid value for currencyCode, length must be greater than 3.", new [] { "currencyCode" });
            }

            // balanceDateTime (string) maxLength
            if (this.balanceDateTime != null && this.balanceDateTime.Length > 29)
            {
                yield return new ValidationResult("Invalid value for balanceDateTime, length must be less than 29.", new [] { "balanceDateTime" });
            }

            // balanceDateTime (string) minLength
            if (this.balanceDateTime != null && this.balanceDateTime.Length < 20)
            {
                yield return new ValidationResult("Invalid value for balanceDateTime, length must be greater than 20.", new [] { "balanceDateTime" });
            }

            yield break;
        }
    }

}
