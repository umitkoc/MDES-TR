/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SuspiciousEvent
    /// </summary>
    [DataContract(Name = "SuspiciousEvent")]
    public partial class SuspiciousEvent : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SuspiciousEvent" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SuspiciousEvent() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SuspiciousEvent" /> class.
        /// </summary>
        /// <param name="eventName">The name of the suspicious event. Must be one of; REPLENISH - There were suspicious ATC values reporting during Replenish (required).</param>
        /// <param name="walletAtcStatus">walletAtcStatus.</param>
        /// <param name="systemAtcStatus">systemAtcStatus.</param>
        public SuspiciousEvent(string eventName = default(string), WalletAtcStatus walletAtcStatus = default(WalletAtcStatus), SystemAtcStatus systemAtcStatus = default(SystemAtcStatus))
        {
            // to ensure "eventName" is required (not null)
            if (eventName == null)
            {
                throw new ArgumentNullException("eventName is a required property for SuspiciousEvent and cannot be null");
            }
            this.eventName = eventName;
            this.walletAtcStatus = walletAtcStatus;
            this.systemAtcStatus = systemAtcStatus;
        }

        /// <summary>
        /// The name of the suspicious event. Must be one of; REPLENISH - There were suspicious ATC values reporting during Replenish
        /// </summary>
        /// <value>The name of the suspicious event. Must be one of; REPLENISH - There were suspicious ATC values reporting during Replenish</value>
        /// <example>REPLENISH</example>
        [DataMember(Name = "eventName", IsRequired = true, EmitDefaultValue = true)]
        public string eventName { get; set; }

        /// <summary>
        /// Gets or Sets walletAtcStatus
        /// </summary>
        [DataMember(Name = "walletAtcStatus", EmitDefaultValue = false)]
        public WalletAtcStatus walletAtcStatus { get; set; }

        /// <summary>
        /// Gets or Sets systemAtcStatus
        /// </summary>
        [DataMember(Name = "systemAtcStatus", EmitDefaultValue = false)]
        public SystemAtcStatus systemAtcStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SuspiciousEvent {\n");
            sb.Append("  eventName: ").Append(eventName).Append("\n");
            sb.Append("  walletAtcStatus: ").Append(walletAtcStatus).Append("\n");
            sb.Append("  systemAtcStatus: ").Append(systemAtcStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // eventName (string) maxLength
            if (this.eventName != null && this.eventName.Length > 32)
            {
                yield return new ValidationResult("Invalid value for eventName, length must be less than 32.", new [] { "eventName" });
            }

            // eventName (string) minLength
            if (this.eventName != null && this.eventName.Length < 1)
            {
                yield return new ValidationResult("Invalid value for eventName, length must be greater than 1.", new [] { "eventName" });
            }

            yield break;
        }
    }

}
