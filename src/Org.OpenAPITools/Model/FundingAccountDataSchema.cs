/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holder’s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Contains an encrypted JSON object. Encrypted by the ephemeral AES key using CBC mode (IV as provided in &#39;iv&#39;, or zero if none provided) and PKCS#7 padding. The JSON object being encrypted will be defined in the context of the API call. Max length - 256k.  Type - String Hex-encoded Data (case-insensitive).
    /// </summary>
    [DataContract(Name = "fundingAccountDataSchema")]
    public partial class FundingAccountDataSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingAccountDataSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FundingAccountDataSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FundingAccountDataSchema" /> class.
        /// </summary>
        /// <param name="source">The source of this account information. Must be one of    - ACCOUNT_ON_FILE : Source was an existing account on file,    - ACCOUNT_ADDED_MANUALLY:  Source was a new account entered manually be the account holder,    - ACCOUNT_ADDED_VIA_APPLICATION: Source was new account added by another application (for example, Issuer banking app),    - EXISTING_TOKEN_CREDENTIAL: Source was an existing token.   - ACCOUNT_ADDED_VIA_BROWSER: Source was browser.   - ACCOUNT_ADDED_VIA_CHIP_DATA: Source is chip or contactless M/Chip .</param>
        /// <param name="dataValidUntilTimestamp">The date/time after which this encrypted object is considered invalid. If present, all systems must reject this encrypted object after this time and treat it as invalid data. Must be expressed in ISO 8601 extended format as one of the following:   - YYYY-MM-DDThh:mm:ss[.sss]Z   - YYYY-MM-DDThh:mm:ss[.sss]±hh:mm  Where [.sss] is optional and can be 1 to 3 digits. Must be a value no more than 30 days in the future. Mastercard recommends using a value of (Current Time + 30 minutes). .</param>
        /// <param name="cardAccountData">cardAccountData (required).</param>
        /// <param name="financialAccountData">financialAccountData.</param>
        /// <param name="tokenData">tokenData.</param>
        /// <param name="paymentAccountReference">The unique account reference assigned to the PAN..</param>
        /// <param name="accountHolderData">accountHolderData.</param>
        /// <param name="chipData">chipData.</param>
        public FundingAccountDataSchema(string source = default(string), string dataValidUntilTimestamp = default(string), CardAccountDataSchema cardAccountData = default(CardAccountDataSchema), FinancialAccountDataSchema financialAccountData = default(FinancialAccountDataSchema), TokenDataSchema tokenData = default(TokenDataSchema), string paymentAccountReference = default(string), AccountHolderDataSchema accountHolderData = default(AccountHolderDataSchema), ChipDataSchema chipData = default(ChipDataSchema))
        {
            // to ensure "cardAccountData" is required (not null)
            if (cardAccountData == null)
            {
                throw new ArgumentNullException("cardAccountData is a required property for FundingAccountDataSchema and cannot be null");
            }
            this.cardAccountData = cardAccountData;
            this.source = source;
            this.dataValidUntilTimestamp = dataValidUntilTimestamp;
            this.financialAccountData = financialAccountData;
            this.tokenData = tokenData;
            this.paymentAccountReference = paymentAccountReference;
            this.accountHolderData = accountHolderData;
            this.chipData = chipData;
        }

        /// <summary>
        /// The source of this account information. Must be one of    - ACCOUNT_ON_FILE : Source was an existing account on file,    - ACCOUNT_ADDED_MANUALLY:  Source was a new account entered manually be the account holder,    - ACCOUNT_ADDED_VIA_APPLICATION: Source was new account added by another application (for example, Issuer banking app),    - EXISTING_TOKEN_CREDENTIAL: Source was an existing token.   - ACCOUNT_ADDED_VIA_BROWSER: Source was browser.   - ACCOUNT_ADDED_VIA_CHIP_DATA: Source is chip or contactless M/Chip 
        /// </summary>
        /// <value>The source of this account information. Must be one of    - ACCOUNT_ON_FILE : Source was an existing account on file,    - ACCOUNT_ADDED_MANUALLY:  Source was a new account entered manually be the account holder,    - ACCOUNT_ADDED_VIA_APPLICATION: Source was new account added by another application (for example, Issuer banking app),    - EXISTING_TOKEN_CREDENTIAL: Source was an existing token.   - ACCOUNT_ADDED_VIA_BROWSER: Source was browser.   - ACCOUNT_ADDED_VIA_CHIP_DATA: Source is chip or contactless M/Chip </value>
        /// <example>ACCOUNT_ON_FILE</example>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string source { get; set; }

        /// <summary>
        /// The date/time after which this encrypted object is considered invalid. If present, all systems must reject this encrypted object after this time and treat it as invalid data. Must be expressed in ISO 8601 extended format as one of the following:   - YYYY-MM-DDThh:mm:ss[.sss]Z   - YYYY-MM-DDThh:mm:ss[.sss]±hh:mm  Where [.sss] is optional and can be 1 to 3 digits. Must be a value no more than 30 days in the future. Mastercard recommends using a value of (Current Time + 30 minutes). 
        /// </summary>
        /// <value>The date/time after which this encrypted object is considered invalid. If present, all systems must reject this encrypted object after this time and treat it as invalid data. Must be expressed in ISO 8601 extended format as one of the following:   - YYYY-MM-DDThh:mm:ss[.sss]Z   - YYYY-MM-DDThh:mm:ss[.sss]±hh:mm  Where [.sss] is optional and can be 1 to 3 digits. Must be a value no more than 30 days in the future. Mastercard recommends using a value of (Current Time + 30 minutes). </value>
        /// <example>2026-07-04T12:09:56.123-07:00</example>
        [DataMember(Name = "dataValidUntilTimestamp", EmitDefaultValue = false)]
        public string dataValidUntilTimestamp { get; set; }

        /// <summary>
        /// Gets or Sets cardAccountData
        /// </summary>
        [DataMember(Name = "cardAccountData", IsRequired = true, EmitDefaultValue = true)]
        public CardAccountDataSchema cardAccountData { get; set; }

        /// <summary>
        /// Gets or Sets financialAccountData
        /// </summary>
        [DataMember(Name = "financialAccountData", EmitDefaultValue = false)]
        public FinancialAccountDataSchema financialAccountData { get; set; }

        /// <summary>
        /// Gets or Sets tokenData
        /// </summary>
        [DataMember(Name = "tokenData", EmitDefaultValue = false)]
        public TokenDataSchema tokenData { get; set; }

        /// <summary>
        /// The unique account reference assigned to the PAN.
        /// </summary>
        /// <value>The unique account reference assigned to the PAN.</value>
        /// <example>512381d9f8e0629211e3949a08002</example>
        [DataMember(Name = "paymentAccountReference", EmitDefaultValue = false)]
        public string paymentAccountReference { get; set; }

        /// <summary>
        /// Gets or Sets accountHolderData
        /// </summary>
        [DataMember(Name = "accountHolderData", EmitDefaultValue = false)]
        public AccountHolderDataSchema accountHolderData { get; set; }

        /// <summary>
        /// Gets or Sets chipData
        /// </summary>
        [DataMember(Name = "chipData", EmitDefaultValue = false)]
        public ChipDataSchema chipData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FundingAccountDataSchema {\n");
            sb.Append("  source: ").Append(source).Append("\n");
            sb.Append("  dataValidUntilTimestamp: ").Append(dataValidUntilTimestamp).Append("\n");
            sb.Append("  cardAccountData: ").Append(cardAccountData).Append("\n");
            sb.Append("  financialAccountData: ").Append(financialAccountData).Append("\n");
            sb.Append("  tokenData: ").Append(tokenData).Append("\n");
            sb.Append("  paymentAccountReference: ").Append(paymentAccountReference).Append("\n");
            sb.Append("  accountHolderData: ").Append(accountHolderData).Append("\n");
            sb.Append("  chipData: ").Append(chipData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // source (string) maxLength
            if (this.source != null && this.source.Length > 32)
            {
                yield return new ValidationResult("Invalid value for source, length must be less than 32.", new [] { "source" });
            }

            // source (string) minLength
            if (this.source != null && this.source.Length < 1)
            {
                yield return new ValidationResult("Invalid value for source, length must be greater than 1.", new [] { "source" });
            }

            // dataValidUntilTimestamp (string) maxLength
            if (this.dataValidUntilTimestamp != null && this.dataValidUntilTimestamp.Length > 29)
            {
                yield return new ValidationResult("Invalid value for dataValidUntilTimestamp, length must be less than 29.", new [] { "dataValidUntilTimestamp" });
            }

            // dataValidUntilTimestamp (string) minLength
            if (this.dataValidUntilTimestamp != null && this.dataValidUntilTimestamp.Length < 20)
            {
                yield return new ValidationResult("Invalid value for dataValidUntilTimestamp, length must be greater than 20.", new [] { "dataValidUntilTimestamp" });
            }

            // paymentAccountReference (string) maxLength
            if (this.paymentAccountReference != null && this.paymentAccountReference.Length > 29)
            {
                yield return new ValidationResult("Invalid value for paymentAccountReference, length must be less than 29.", new [] { "paymentAccountReference" });
            }

            // paymentAccountReference (string) minLength
            if (this.paymentAccountReference != null && this.paymentAccountReference.Length < 29)
            {
                yield return new ValidationResult("Invalid value for paymentAccountReference, length must be greater than 29.", new [] { "paymentAccountReference" });
            }

            yield break;
        }
    }

}
