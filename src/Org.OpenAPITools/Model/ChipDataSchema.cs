/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// This parameter is present only when issuer supports Tap to Add Card and issuer has decided to receive and validate chip data by themselves.
    /// </summary>
    [DataContract(Name = "chipDataSchema")]
    public partial class ChipDataSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipDataSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChipDataSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipDataSchema" /> class.
        /// </summary>
        /// <param name="track2Data">The track2Data of the card to be digitized. Contains Hex-encoded string. (required).</param>
        /// <param name="panEntryMode">The method used for PAN entry to initiate the digitization (required).</param>
        /// <param name="iccSystemRelatedData">The Account Primary Account Number of the card to be digitized. Contains Hex-encoded string. (required).</param>
        public ChipDataSchema(string track2Data = default(string), string panEntryMode = default(string), string iccSystemRelatedData = default(string))
        {
            // to ensure "track2Data" is required (not null)
            if (track2Data == null)
            {
                throw new ArgumentNullException("track2Data is a required property for ChipDataSchema and cannot be null");
            }
            this.track2Data = track2Data;
            // to ensure "panEntryMode" is required (not null)
            if (panEntryMode == null)
            {
                throw new ArgumentNullException("panEntryMode is a required property for ChipDataSchema and cannot be null");
            }
            this.panEntryMode = panEntryMode;
            // to ensure "iccSystemRelatedData" is required (not null)
            if (iccSystemRelatedData == null)
            {
                throw new ArgumentNullException("iccSystemRelatedData is a required property for ChipDataSchema and cannot be null");
            }
            this.iccSystemRelatedData = iccSystemRelatedData;
        }

        /// <summary>
        /// The track2Data of the card to be digitized. Contains Hex-encoded string.
        /// </summary>
        /// <value>The track2Data of the card to be digitized. Contains Hex-encoded string.</value>
        /// <example>ABC03443HF232005</example>
        [DataMember(Name = "track2Data", IsRequired = true, EmitDefaultValue = true)]
        public string track2Data { get; set; }

        /// <summary>
        /// The method used for PAN entry to initiate the digitization
        /// </summary>
        /// <value>The method used for PAN entry to initiate the digitization</value>
        /// <example>07</example>
        [DataMember(Name = "panEntryMode", IsRequired = true, EmitDefaultValue = true)]
        public string panEntryMode { get; set; }

        /// <summary>
        /// The Account Primary Account Number of the card to be digitized. Contains Hex-encoded string.
        /// </summary>
        /// <value>The Account Primary Account Number of the card to be digitized. Contains Hex-encoded string.</value>
        /// <example>ABC03443HF232005</example>
        [DataMember(Name = "iccSystemRelatedData", IsRequired = true, EmitDefaultValue = true)]
        public string iccSystemRelatedData { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChipDataSchema {\n");
            sb.Append("  track2Data: ").Append(track2Data).Append("\n");
            sb.Append("  panEntryMode: ").Append(panEntryMode).Append("\n");
            sb.Append("  iccSystemRelatedData: ").Append(iccSystemRelatedData).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // track2Data (string) maxLength
            if (this.track2Data != null && this.track2Data.Length > 37)
            {
                yield return new ValidationResult("Invalid value for track2Data, length must be less than 37.", new [] { "track2Data" });
            }

            // track2Data (string) minLength
            if (this.track2Data != null && this.track2Data.Length < 1)
            {
                yield return new ValidationResult("Invalid value for track2Data, length must be greater than 1.", new [] { "track2Data" });
            }

            // panEntryMode (string) maxLength
            if (this.panEntryMode != null && this.panEntryMode.Length > 4)
            {
                yield return new ValidationResult("Invalid value for panEntryMode, length must be less than 4.", new [] { "panEntryMode" });
            }

            // panEntryMode (string) minLength
            if (this.panEntryMode != null && this.panEntryMode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for panEntryMode, length must be greater than 1.", new [] { "panEntryMode" });
            }

            // iccSystemRelatedData (string) maxLength
            if (this.iccSystemRelatedData != null && this.iccSystemRelatedData.Length > 255)
            {
                yield return new ValidationResult("Invalid value for iccSystemRelatedData, length must be less than 255.", new [] { "iccSystemRelatedData" });
            }

            // iccSystemRelatedData (string) minLength
            if (this.iccSystemRelatedData != null && this.iccSystemRelatedData.Length < 1)
            {
                yield return new ValidationResult("Invalid value for iccSystemRelatedData, length must be greater than 1.", new [] { "iccSystemRelatedData" });
            }

            yield break;
        }
    }

}
