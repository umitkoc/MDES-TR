/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// The financial account information for the account that is being tokenized. This could be a bank account or other type of financial account. Max length - Not applicable. Conditional. Only present in the FPAN update use case for Financial Account ID but requires to be opted in.
    /// </summary>
    [DataContract(Name = "financialAccountDataSchema")]
    public partial class FinancialAccountDataSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccountDataSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FinancialAccountDataSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FinancialAccountDataSchema" /> class.
        /// </summary>
        /// <param name="financialAccountId">The identifier of the financial account being tokenized.  This could be a bank account number or other types of financial accounts. (required).</param>
        /// <param name="interbankCardAssociationId">The id assigned by Mastercard to the financial institution. (required).</param>
        /// <param name="countryCode">The country of the financial account. Expressed as a 3-letter (alpha-3) country code as defined in ISO 3166-1. (required).</param>
        public FinancialAccountDataSchema(string financialAccountId = default(string), string interbankCardAssociationId = default(string), string countryCode = default(string))
        {
            // to ensure "financialAccountId" is required (not null)
            if (financialAccountId == null)
            {
                throw new ArgumentNullException("financialAccountId is a required property for FinancialAccountDataSchema and cannot be null");
            }
            this.financialAccountId = financialAccountId;
            // to ensure "interbankCardAssociationId" is required (not null)
            if (interbankCardAssociationId == null)
            {
                throw new ArgumentNullException("interbankCardAssociationId is a required property for FinancialAccountDataSchema and cannot be null");
            }
            this.interbankCardAssociationId = interbankCardAssociationId;
            // to ensure "countryCode" is required (not null)
            if (countryCode == null)
            {
                throw new ArgumentNullException("countryCode is a required property for FinancialAccountDataSchema and cannot be null");
            }
            this.countryCode = countryCode;
        }

        /// <summary>
        /// The identifier of the financial account being tokenized.  This could be a bank account number or other types of financial accounts.
        /// </summary>
        /// <value>The identifier of the financial account being tokenized.  This could be a bank account number or other types of financial accounts.</value>
        /// <example>5123456789012345</example>
        [DataMember(Name = "financialAccountId", IsRequired = true, EmitDefaultValue = true)]
        public string financialAccountId { get; set; }

        /// <summary>
        /// The id assigned by Mastercard to the financial institution.
        /// </summary>
        /// <value>The id assigned by Mastercard to the financial institution.</value>
        /// <example>1234</example>
        [DataMember(Name = "interbankCardAssociationId", IsRequired = true, EmitDefaultValue = true)]
        public string interbankCardAssociationId { get; set; }

        /// <summary>
        /// The country of the financial account. Expressed as a 3-letter (alpha-3) country code as defined in ISO 3166-1.
        /// </summary>
        /// <value>The country of the financial account. Expressed as a 3-letter (alpha-3) country code as defined in ISO 3166-1.</value>
        /// <example>GBR</example>
        [DataMember(Name = "countryCode", IsRequired = true, EmitDefaultValue = true)]
        public string countryCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class FinancialAccountDataSchema {\n");
            sb.Append("  financialAccountId: ").Append(financialAccountId).Append("\n");
            sb.Append("  interbankCardAssociationId: ").Append(interbankCardAssociationId).Append("\n");
            sb.Append("  countryCode: ").Append(countryCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // financialAccountId (string) maxLength
            if (this.financialAccountId != null && this.financialAccountId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for financialAccountId, length must be less than 64.", new [] { "financialAccountId" });
            }

            // financialAccountId (string) minLength
            if (this.financialAccountId != null && this.financialAccountId.Length < 9)
            {
                yield return new ValidationResult("Invalid value for financialAccountId, length must be greater than 9.", new [] { "financialAccountId" });
            }

            // interbankCardAssociationId (string) maxLength
            if (this.interbankCardAssociationId != null && this.interbankCardAssociationId.Length > 11)
            {
                yield return new ValidationResult("Invalid value for interbankCardAssociationId, length must be less than 11.", new [] { "interbankCardAssociationId" });
            }

            // interbankCardAssociationId (string) minLength
            if (this.interbankCardAssociationId != null && this.interbankCardAssociationId.Length < 3)
            {
                yield return new ValidationResult("Invalid value for interbankCardAssociationId, length must be greater than 3.", new [] { "interbankCardAssociationId" });
            }

            // countryCode (string) maxLength
            if (this.countryCode != null && this.countryCode.Length > 3)
            {
                yield return new ValidationResult("Invalid value for countryCode, length must be less than 3.", new [] { "countryCode" });
            }

            // countryCode (string) minLength
            if (this.countryCode != null && this.countryCode.Length < 3)
            {
                yield return new ValidationResult("Invalid value for countryCode, length must be greater than 3.", new [] { "countryCode" });
            }

            yield break;
        }
    }

}
