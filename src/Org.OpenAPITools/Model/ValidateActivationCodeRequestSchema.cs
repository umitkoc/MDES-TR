/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ValidateActivationCodeRequestSchema
    /// </summary>
    [DataContract(Name = "ValidateActivationCodeRequestSchema")]
    public partial class ValidateActivationCodeRequestSchema : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeRequestSchema" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ValidateActivationCodeRequestSchema() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ValidateActivationCodeRequestSchema" /> class.
        /// </summary>
        /// <param name="requestId">The id of the request submitted. Max length - 64 (required).</param>
        /// <param name="tokenUniqueReference">A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime. (required).</param>
        /// <param name="correlationId">Value linking pre-digitization messages generated during provisioning. (required).</param>
        /// <param name="activationCode">The Activation Code entered by the consumer. (required).</param>
        public ValidateActivationCodeRequestSchema(string requestId = default(string), string tokenUniqueReference = default(string), string correlationId = default(string), string activationCode = default(string))
        {
            // to ensure "requestId" is required (not null)
            if (requestId == null)
            {
                throw new ArgumentNullException("requestId is a required property for ValidateActivationCodeRequestSchema and cannot be null");
            }
            this.requestId = requestId;
            // to ensure "tokenUniqueReference" is required (not null)
            if (tokenUniqueReference == null)
            {
                throw new ArgumentNullException("tokenUniqueReference is a required property for ValidateActivationCodeRequestSchema and cannot be null");
            }
            this.tokenUniqueReference = tokenUniqueReference;
            // to ensure "correlationId" is required (not null)
            if (correlationId == null)
            {
                throw new ArgumentNullException("correlationId is a required property for ValidateActivationCodeRequestSchema and cannot be null");
            }
            this.correlationId = correlationId;
            // to ensure "activationCode" is required (not null)
            if (activationCode == null)
            {
                throw new ArgumentNullException("activationCode is a required property for ValidateActivationCodeRequestSchema and cannot be null");
            }
            this.activationCode = activationCode;
        }

        /// <summary>
        /// The id of the request submitted. Max length - 64
        /// </summary>
        /// <value>The id of the request submitted. Max length - 64</value>
        /// <example>123456</example>
        [DataMember(Name = "requestId", IsRequired = true, EmitDefaultValue = true)]
        public string requestId { get; set; }

        /// <summary>
        /// A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.
        /// </summary>
        /// <value>A unique reference assigned following the allocation of a token used to identify the token for the duration of its lifetime.</value>
        /// <example>DWSPMC000000000132d72d4fcb2f4136a0532d3093ff1a45</example>
        [DataMember(Name = "tokenUniqueReference", IsRequired = true, EmitDefaultValue = true)]
        public string tokenUniqueReference { get; set; }

        /// <summary>
        /// Value linking pre-digitization messages generated during provisioning.
        /// </summary>
        /// <value>Value linking pre-digitization messages generated during provisioning.</value>
        /// <example>D98765432104</example>
        [DataMember(Name = "correlationId", IsRequired = true, EmitDefaultValue = true)]
        public string correlationId { get; set; }

        /// <summary>
        /// The Activation Code entered by the consumer.
        /// </summary>
        /// <value>The Activation Code entered by the consumer.</value>
        /// <example>A1B2C3D4</example>
        [DataMember(Name = "activationCode", IsRequired = true, EmitDefaultValue = true)]
        public string activationCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ValidateActivationCodeRequestSchema {\n");
            sb.Append("  requestId: ").Append(requestId).Append("\n");
            sb.Append("  tokenUniqueReference: ").Append(tokenUniqueReference).Append("\n");
            sb.Append("  correlationId: ").Append(correlationId).Append("\n");
            sb.Append("  activationCode: ").Append(activationCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // requestId (string) maxLength
            if (this.requestId != null && this.requestId.Length > 64)
            {
                yield return new ValidationResult("Invalid value for requestId, length must be less than 64.", new [] { "requestId" });
            }

            // requestId (string) minLength
            if (this.requestId != null && this.requestId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for requestId, length must be greater than 1.", new [] { "requestId" });
            }

            // tokenUniqueReference (string) maxLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length > 64)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be less than 64.", new [] { "tokenUniqueReference" });
            }

            // tokenUniqueReference (string) minLength
            if (this.tokenUniqueReference != null && this.tokenUniqueReference.Length < 1)
            {
                yield return new ValidationResult("Invalid value for tokenUniqueReference, length must be greater than 1.", new [] { "tokenUniqueReference" });
            }

            // correlationId (string) maxLength
            if (this.correlationId != null && this.correlationId.Length > 14)
            {
                yield return new ValidationResult("Invalid value for correlationId, length must be less than 14.", new [] { "correlationId" });
            }

            // correlationId (string) minLength
            if (this.correlationId != null && this.correlationId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for correlationId, length must be greater than 1.", new [] { "correlationId" });
            }

            // activationCode (string) maxLength
            if (this.activationCode != null && this.activationCode.Length > 32)
            {
                yield return new ValidationResult("Invalid value for activationCode, length must be less than 32.", new [] { "activationCode" });
            }

            // activationCode (string) minLength
            if (this.activationCode != null && this.activationCode.Length < 1)
            {
                yield return new ValidationResult("Invalid value for activationCode, length must be greater than 1.", new [] { "activationCode" });
            }

            yield break;
        }
    }

}
