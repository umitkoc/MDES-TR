/*
 * Token Connect API
 *
 * The MDES APIs are designed as RPC style stateless web services where each API endpoint represents an operation to be performed. All request and response payloads are sent in the JSON (JavaScript Object Notation) data-interchange format. Each endpoint in the API specifies the HTTP Method used to access it. All strings in request and response objects are to be UTF-8 encoded. All request and response parameters are case sensitive. 
 *
 * The version of the OpenAPI document: 2.0.8
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// AssetResponseData
    /// </summary>
    [DataContract(Name = "AssetResponseData")]
    public partial class AssetResponseData : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AssetResponseData" /> class.
        /// </summary>
        /// <param name="mediaContents">Contains all contents of the Asset, including all variations. When the Asset corresponds to a Token Requestor&#39;s logo, the logo is provided both in .svg as well as in .png format.</param>
        public AssetResponseData(List<MediaContent> mediaContents = default(List<MediaContent>))
        {
            this.mediaContents = mediaContents;
        }

        /// <summary>
        /// Contains all contents of the Asset, including all variations. When the Asset corresponds to a Token Requestor&#39;s logo, the logo is provided both in .svg as well as in .png format
        /// </summary>
        /// <value>Contains all contents of the Asset, including all variations. When the Asset corresponds to a Token Requestor&#39;s logo, the logo is provided both in .svg as well as in .png format</value>
        [DataMember(Name = "mediaContents", EmitDefaultValue = false)]
        public List<MediaContent> mediaContents { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AssetResponseData {\n");
            sb.Append("  mediaContents: ").Append(mediaContents).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
