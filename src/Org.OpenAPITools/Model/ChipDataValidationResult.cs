/*
 * Mastercard Digital Enablement Service Issuer Outbound API
 *
 * The MDES Issuer Outbound Pre-Digitization API supports the pre-digitization web services provided by the Digitization Service. The web services are used to inform Issuers of MDES services being requested by, or on-behalf of, their account holders. Issuers may provide information in their responses to guide or inform the Account holderâ€™s experience through the Token Reqestor.
 *
 * The version of the OpenAPI document: 2.0.21 (Document version)
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;


namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// ChipDataValidationResult present only when issuer supports Tap to Add Card and issuer has decided to use Mastercard On-behalf service (OBS) for chip data validation.
    /// </summary>
    [DataContract(Name = "chipDataValidationResult")]
    public partial class ChipDataValidationResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipDataValidationResult" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected ChipDataValidationResult() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="ChipDataValidationResult" /> class.
        /// </summary>
        /// <param name="oBSServiceIndicator">The On-behalf Service indicator of the chipData validation (required).</param>
        /// <param name="oBSResult">The On-behalf Service chipData validation result. (required).</param>
        public ChipDataValidationResult(string oBSServiceIndicator = default(string), string oBSResult = default(string))
        {
            // to ensure "oBSServiceIndicator" is required (not null)
            if (oBSServiceIndicator == null)
            {
                throw new ArgumentNullException("oBSServiceIndicator is a required property for ChipDataValidationResult and cannot be null");
            }
            this.oBSServiceIndicator = oBSServiceIndicator;
            // to ensure "oBSResult" is required (not null)
            if (oBSResult == null)
            {
                throw new ArgumentNullException("oBSResult is a required property for ChipDataValidationResult and cannot be null");
            }
            this.oBSResult = oBSResult;
        }

        /// <summary>
        /// The On-behalf Service indicator of the chipData validation
        /// </summary>
        /// <value>The On-behalf Service indicator of the chipData validation</value>
        /// <example>03</example>
        [DataMember(Name = "OBSServiceIndicator", IsRequired = true, EmitDefaultValue = true)]
        public string oBSServiceIndicator { get; set; }

        /// <summary>
        /// The On-behalf Service chipData validation result.
        /// </summary>
        /// <value>The On-behalf Service chipData validation result.</value>
        /// <example>V</example>
        [DataMember(Name = "OBSResult", IsRequired = true, EmitDefaultValue = true)]
        public string oBSResult { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ChipDataValidationResult {\n");
            sb.Append("  oBSServiceIndicator: ").Append(oBSServiceIndicator).Append("\n");
            sb.Append("  oBSResult: ").Append(oBSResult).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // oBSServiceIndicator (string) maxLength
            if (this.oBSServiceIndicator != null && this.oBSServiceIndicator.Length > 2)
            {
                yield return new ValidationResult("Invalid value for oBSServiceIndicator, length must be less than 2.", new [] { "oBSServiceIndicator" });
            }

            // oBSServiceIndicator (string) minLength
            if (this.oBSServiceIndicator != null && this.oBSServiceIndicator.Length < 1)
            {
                yield return new ValidationResult("Invalid value for oBSServiceIndicator, length must be greater than 1.", new [] { "oBSServiceIndicator" });
            }

            // oBSResult (string) maxLength
            if (this.oBSResult != null && this.oBSResult.Length > 3)
            {
                yield return new ValidationResult("Invalid value for oBSResult, length must be less than 3.", new [] { "oBSResult" });
            }

            // oBSResult (string) minLength
            if (this.oBSResult != null && this.oBSResult.Length < 1)
            {
                yield return new ValidationResult("Invalid value for oBSResult, length must be greater than 1.", new [] { "oBSResult" });
            }

            yield break;
        }
    }

}
