/*
 * Mastercard Digital Enablement API
 *
 * The Mastercard Digital Enablement API encompasses a set of APIs that are initiated by the Token Requestor for the purposes of creating and managing the life cycle of a token.      **Authentication**  <br><br>  Mastercard uses OAuth 1.0a with body hash extension for authenticating the API clients. This requires every request that you send to  Mastercard to be signed with an RSA private key. A private-public RSA key pair must be generated consisting of:  <br><br>  1. A private key for the OAuth signature for API requests. It is recommended to keep the private key in a password-protected or hardware keystore.  <br>  2. A public key is shared with Mastercard during the project setup process through either a certificate signing request (CSR) or the API Key Generator. Mastercard will use the public key to verify the OAuth signature that is provided on every API call.<br>   An OAUTH1.0a signer library is available on [GitHub](https://github.com/Mastercard/oauth1-signer-java)  <br><br>  **Encryption**  <br><br>  All communications between Issuer web service and the Mastercard gateway is encrypted using TLS.  <br><br>  **Additional Encryption of Sensitive Data**  <br><br>  In addition to the OAuth authentication, when using MDES Digital Enablement Service, any PCI sensitive and all account holder Personally Identifiable Information (PII) data must be encrypted. This requirement applies to the API fields containing encryptedData. Sensitive data is encrypted using a symmetric session (one-time-use) key. The symmetric session key is then wrapped with an RSA Public Key supplied by Mastercard during API setup phase (the Customer Encryption Key). <br>   Java Client Encryption Library available on [GitHub](https://github.com/Mastercard/client-encryption-java) 
 *
 * The version of the OpenAPI document: 1.3.3
 * Contact: apisupport@mastercard.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Only returned in the event of an error condition.
    /// </summary>
    [DataContract(Name = "Error")]
    public partial class Error : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Error" /> class.
        /// </summary>
        /// <param name="source">An element used to indicate the source of the issue causing this error. Must be one of  * &#39;MDES&#39;  * &#39;INPUT&#39; .</param>
        /// <param name="errorCode">An error code generated by the gateway if the error occurs before reaching the MDES application. .</param>
        /// <param name="description">Description of the reason the operation failed. See API Response Errors .</param>
        /// <param name="reasonCode">A reason code for the error that has occurred. .</param>
        /// <param name="recoverable">Generated by the gateway to indicate if the request could presented again for processing. Either \&quot;TRUE\&quot; or \&quot;FALSE\&quot; .</param>
        public Error(string source = default(string), string errorCode = default(string), string description = default(string), string reasonCode = default(string), bool recoverable = default(bool))
        {
            this.Source = source;
            this.ErrorCode = errorCode;
            this.Description = description;
            this.ReasonCode = reasonCode;
            this.Recoverable = recoverable;
        }

        /// <summary>
        /// An element used to indicate the source of the issue causing this error. Must be one of  * &#39;MDES&#39;  * &#39;INPUT&#39; 
        /// </summary>
        /// <value>An element used to indicate the source of the issue causing this error. Must be one of  * &#39;MDES&#39;  * &#39;INPUT&#39; </value>
        /// <example>INPUT</example>
        [DataMember(Name = "source", EmitDefaultValue = false)]
        public string Source { get; set; }

        /// <summary>
        /// An error code generated by the gateway if the error occurs before reaching the MDES application. 
        /// </summary>
        /// <value>An error code generated by the gateway if the error occurs before reaching the MDES application. </value>
        /// <example>E0010097</example>
        [DataMember(Name = "errorCode", EmitDefaultValue = false)]
        public string ErrorCode { get; set; }

        /// <summary>
        /// Description of the reason the operation failed. See API Response Errors 
        /// </summary>
        /// <value>Description of the reason the operation failed. See API Response Errors </value>
        /// <example>Invalid Field Length - EncryptedAccountInformation.Iv</example>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// A reason code for the error that has occurred. 
        /// </summary>
        /// <value>A reason code for the error that has occurred. </value>
        /// <example>INVALID_FIELD_LENGTH</example>
        [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
        public string ReasonCode { get; set; }

        /// <summary>
        /// Generated by the gateway to indicate if the request could presented again for processing. Either \&quot;TRUE\&quot; or \&quot;FALSE\&quot; 
        /// </summary>
        /// <value>Generated by the gateway to indicate if the request could presented again for processing. Either \&quot;TRUE\&quot; or \&quot;FALSE\&quot; </value>
        /// <example>true</example>
        [DataMember(Name = "recoverable", EmitDefaultValue = true)]
        public bool Recoverable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Error {\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
            sb.Append("  Recoverable: ").Append(Recoverable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Source (string) maxLength
            if (this.Source != null && this.Source.Length > 32)
            {
                yield return new ValidationResult("Invalid value for Source, length must be less than 32.", new [] { "Source" });
            }

            // ErrorCode (string) maxLength
            if (this.ErrorCode != null && this.ErrorCode.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ErrorCode, length must be less than 100.", new [] { "ErrorCode" });
            }

            // Description (string) maxLength
            if (this.Description != null && this.Description.Length > 256)
            {
                yield return new ValidationResult("Invalid value for Description, length must be less than 256.", new [] { "Description" });
            }

            // ReasonCode (string) maxLength
            if (this.ReasonCode != null && this.ReasonCode.Length > 100)
            {
                yield return new ValidationResult("Invalid value for ReasonCode, length must be less than 100.", new [] { "ReasonCode" });
            }

            yield break;
        }
    }

}
